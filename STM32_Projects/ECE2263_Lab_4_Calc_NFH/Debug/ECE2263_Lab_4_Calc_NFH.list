
ECE2263_Lab_4_Calc_NFH.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002c00  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08002d98  08002d98  00012d98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002dd8  08002dd8  0002002c  2**0
                  CONTENTS
  4 .ARM          00000008  08002dd8  08002dd8  00012dd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002de0  08002de0  0002002c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002de0  08002de0  00012de0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002de4  08002de4  00012de4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000002c  20000000  08002de8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a4  2000002c  08002e14  0002002c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000d0  08002e14  000200d0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ace7  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000017df  00000000  00000000  0002ad43  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000b10  00000000  00000000  0002c528  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000a58  00000000  00000000  0002d038  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00016265  00000000  00000000  0002da90  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00007a6c  00000000  00000000  00043cf5  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008c9d7  00000000  00000000  0004b761  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000d8138  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002e8c  00000000  00000000  000d81b4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000002c 	.word	0x2000002c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08002d80 	.word	0x08002d80

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000030 	.word	0x20000030
 80001d4:	08002d80 	.word	0x08002d80

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b972 	b.w	80004d4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9e08      	ldr	r6, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	4688      	mov	r8, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14b      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000216:	428a      	cmp	r2, r1
 8000218:	4615      	mov	r5, r2
 800021a:	d967      	bls.n	80002ec <__udivmoddi4+0xe4>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b14a      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000222:	f1c2 0720 	rsb	r7, r2, #32
 8000226:	fa01 f302 	lsl.w	r3, r1, r2
 800022a:	fa20 f707 	lsr.w	r7, r0, r7
 800022e:	4095      	lsls	r5, r2
 8000230:	ea47 0803 	orr.w	r8, r7, r3
 8000234:	4094      	lsls	r4, r2
 8000236:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800023a:	0c23      	lsrs	r3, r4, #16
 800023c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000240:	fa1f fc85 	uxth.w	ip, r5
 8000244:	fb0e 8817 	mls	r8, lr, r7, r8
 8000248:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800024c:	fb07 f10c 	mul.w	r1, r7, ip
 8000250:	4299      	cmp	r1, r3
 8000252:	d909      	bls.n	8000268 <__udivmoddi4+0x60>
 8000254:	18eb      	adds	r3, r5, r3
 8000256:	f107 30ff 	add.w	r0, r7, #4294967295
 800025a:	f080 811b 	bcs.w	8000494 <__udivmoddi4+0x28c>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 8118 	bls.w	8000494 <__udivmoddi4+0x28c>
 8000264:	3f02      	subs	r7, #2
 8000266:	442b      	add	r3, r5
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000270:	fb0e 3310 	mls	r3, lr, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 fc0c 	mul.w	ip, r0, ip
 800027c:	45a4      	cmp	ip, r4
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x8c>
 8000280:	192c      	adds	r4, r5, r4
 8000282:	f100 33ff 	add.w	r3, r0, #4294967295
 8000286:	f080 8107 	bcs.w	8000498 <__udivmoddi4+0x290>
 800028a:	45a4      	cmp	ip, r4
 800028c:	f240 8104 	bls.w	8000498 <__udivmoddi4+0x290>
 8000290:	3802      	subs	r0, #2
 8000292:	442c      	add	r4, r5
 8000294:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000298:	eba4 040c 	sub.w	r4, r4, ip
 800029c:	2700      	movs	r7, #0
 800029e:	b11e      	cbz	r6, 80002a8 <__udivmoddi4+0xa0>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c6 4300 	strd	r4, r3, [r6]
 80002a8:	4639      	mov	r1, r7
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d909      	bls.n	80002c6 <__udivmoddi4+0xbe>
 80002b2:	2e00      	cmp	r6, #0
 80002b4:	f000 80eb 	beq.w	800048e <__udivmoddi4+0x286>
 80002b8:	2700      	movs	r7, #0
 80002ba:	e9c6 0100 	strd	r0, r1, [r6]
 80002be:	4638      	mov	r0, r7
 80002c0:	4639      	mov	r1, r7
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	fab3 f783 	clz	r7, r3
 80002ca:	2f00      	cmp	r7, #0
 80002cc:	d147      	bne.n	800035e <__udivmoddi4+0x156>
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d302      	bcc.n	80002d8 <__udivmoddi4+0xd0>
 80002d2:	4282      	cmp	r2, r0
 80002d4:	f200 80fa 	bhi.w	80004cc <__udivmoddi4+0x2c4>
 80002d8:	1a84      	subs	r4, r0, r2
 80002da:	eb61 0303 	sbc.w	r3, r1, r3
 80002de:	2001      	movs	r0, #1
 80002e0:	4698      	mov	r8, r3
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	d0e0      	beq.n	80002a8 <__udivmoddi4+0xa0>
 80002e6:	e9c6 4800 	strd	r4, r8, [r6]
 80002ea:	e7dd      	b.n	80002a8 <__udivmoddi4+0xa0>
 80002ec:	b902      	cbnz	r2, 80002f0 <__udivmoddi4+0xe8>
 80002ee:	deff      	udf	#255	; 0xff
 80002f0:	fab2 f282 	clz	r2, r2
 80002f4:	2a00      	cmp	r2, #0
 80002f6:	f040 808f 	bne.w	8000418 <__udivmoddi4+0x210>
 80002fa:	1b49      	subs	r1, r1, r5
 80002fc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000300:	fa1f f885 	uxth.w	r8, r5
 8000304:	2701      	movs	r7, #1
 8000306:	fbb1 fcfe 	udiv	ip, r1, lr
 800030a:	0c23      	lsrs	r3, r4, #16
 800030c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000310:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000314:	fb08 f10c 	mul.w	r1, r8, ip
 8000318:	4299      	cmp	r1, r3
 800031a:	d907      	bls.n	800032c <__udivmoddi4+0x124>
 800031c:	18eb      	adds	r3, r5, r3
 800031e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x122>
 8000324:	4299      	cmp	r1, r3
 8000326:	f200 80cd 	bhi.w	80004c4 <__udivmoddi4+0x2bc>
 800032a:	4684      	mov	ip, r0
 800032c:	1a59      	subs	r1, r3, r1
 800032e:	b2a3      	uxth	r3, r4
 8000330:	fbb1 f0fe 	udiv	r0, r1, lr
 8000334:	fb0e 1410 	mls	r4, lr, r0, r1
 8000338:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800033c:	fb08 f800 	mul.w	r8, r8, r0
 8000340:	45a0      	cmp	r8, r4
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x14c>
 8000344:	192c      	adds	r4, r5, r4
 8000346:	f100 33ff 	add.w	r3, r0, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x14a>
 800034c:	45a0      	cmp	r8, r4
 800034e:	f200 80b6 	bhi.w	80004be <__udivmoddi4+0x2b6>
 8000352:	4618      	mov	r0, r3
 8000354:	eba4 0408 	sub.w	r4, r4, r8
 8000358:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800035c:	e79f      	b.n	800029e <__udivmoddi4+0x96>
 800035e:	f1c7 0c20 	rsb	ip, r7, #32
 8000362:	40bb      	lsls	r3, r7
 8000364:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000368:	ea4e 0e03 	orr.w	lr, lr, r3
 800036c:	fa01 f407 	lsl.w	r4, r1, r7
 8000370:	fa20 f50c 	lsr.w	r5, r0, ip
 8000374:	fa21 f30c 	lsr.w	r3, r1, ip
 8000378:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800037c:	4325      	orrs	r5, r4
 800037e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000382:	0c2c      	lsrs	r4, r5, #16
 8000384:	fb08 3319 	mls	r3, r8, r9, r3
 8000388:	fa1f fa8e 	uxth.w	sl, lr
 800038c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000390:	fb09 f40a 	mul.w	r4, r9, sl
 8000394:	429c      	cmp	r4, r3
 8000396:	fa02 f207 	lsl.w	r2, r2, r7
 800039a:	fa00 f107 	lsl.w	r1, r0, r7
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b0>
 80003a0:	eb1e 0303 	adds.w	r3, lr, r3
 80003a4:	f109 30ff 	add.w	r0, r9, #4294967295
 80003a8:	f080 8087 	bcs.w	80004ba <__udivmoddi4+0x2b2>
 80003ac:	429c      	cmp	r4, r3
 80003ae:	f240 8084 	bls.w	80004ba <__udivmoddi4+0x2b2>
 80003b2:	f1a9 0902 	sub.w	r9, r9, #2
 80003b6:	4473      	add	r3, lr
 80003b8:	1b1b      	subs	r3, r3, r4
 80003ba:	b2ad      	uxth	r5, r5
 80003bc:	fbb3 f0f8 	udiv	r0, r3, r8
 80003c0:	fb08 3310 	mls	r3, r8, r0, r3
 80003c4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003c8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003cc:	45a2      	cmp	sl, r4
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1da>
 80003d0:	eb1e 0404 	adds.w	r4, lr, r4
 80003d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d8:	d26b      	bcs.n	80004b2 <__udivmoddi4+0x2aa>
 80003da:	45a2      	cmp	sl, r4
 80003dc:	d969      	bls.n	80004b2 <__udivmoddi4+0x2aa>
 80003de:	3802      	subs	r0, #2
 80003e0:	4474      	add	r4, lr
 80003e2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003e6:	fba0 8902 	umull	r8, r9, r0, r2
 80003ea:	eba4 040a 	sub.w	r4, r4, sl
 80003ee:	454c      	cmp	r4, r9
 80003f0:	46c2      	mov	sl, r8
 80003f2:	464b      	mov	r3, r9
 80003f4:	d354      	bcc.n	80004a0 <__udivmoddi4+0x298>
 80003f6:	d051      	beq.n	800049c <__udivmoddi4+0x294>
 80003f8:	2e00      	cmp	r6, #0
 80003fa:	d069      	beq.n	80004d0 <__udivmoddi4+0x2c8>
 80003fc:	ebb1 050a 	subs.w	r5, r1, sl
 8000400:	eb64 0403 	sbc.w	r4, r4, r3
 8000404:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000408:	40fd      	lsrs	r5, r7
 800040a:	40fc      	lsrs	r4, r7
 800040c:	ea4c 0505 	orr.w	r5, ip, r5
 8000410:	e9c6 5400 	strd	r5, r4, [r6]
 8000414:	2700      	movs	r7, #0
 8000416:	e747      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000418:	f1c2 0320 	rsb	r3, r2, #32
 800041c:	fa20 f703 	lsr.w	r7, r0, r3
 8000420:	4095      	lsls	r5, r2
 8000422:	fa01 f002 	lsl.w	r0, r1, r2
 8000426:	fa21 f303 	lsr.w	r3, r1, r3
 800042a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800042e:	4338      	orrs	r0, r7
 8000430:	0c01      	lsrs	r1, r0, #16
 8000432:	fbb3 f7fe 	udiv	r7, r3, lr
 8000436:	fa1f f885 	uxth.w	r8, r5
 800043a:	fb0e 3317 	mls	r3, lr, r7, r3
 800043e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000442:	fb07 f308 	mul.w	r3, r7, r8
 8000446:	428b      	cmp	r3, r1
 8000448:	fa04 f402 	lsl.w	r4, r4, r2
 800044c:	d907      	bls.n	800045e <__udivmoddi4+0x256>
 800044e:	1869      	adds	r1, r5, r1
 8000450:	f107 3cff 	add.w	ip, r7, #4294967295
 8000454:	d22f      	bcs.n	80004b6 <__udivmoddi4+0x2ae>
 8000456:	428b      	cmp	r3, r1
 8000458:	d92d      	bls.n	80004b6 <__udivmoddi4+0x2ae>
 800045a:	3f02      	subs	r7, #2
 800045c:	4429      	add	r1, r5
 800045e:	1acb      	subs	r3, r1, r3
 8000460:	b281      	uxth	r1, r0
 8000462:	fbb3 f0fe 	udiv	r0, r3, lr
 8000466:	fb0e 3310 	mls	r3, lr, r0, r3
 800046a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046e:	fb00 f308 	mul.w	r3, r0, r8
 8000472:	428b      	cmp	r3, r1
 8000474:	d907      	bls.n	8000486 <__udivmoddi4+0x27e>
 8000476:	1869      	adds	r1, r5, r1
 8000478:	f100 3cff 	add.w	ip, r0, #4294967295
 800047c:	d217      	bcs.n	80004ae <__udivmoddi4+0x2a6>
 800047e:	428b      	cmp	r3, r1
 8000480:	d915      	bls.n	80004ae <__udivmoddi4+0x2a6>
 8000482:	3802      	subs	r0, #2
 8000484:	4429      	add	r1, r5
 8000486:	1ac9      	subs	r1, r1, r3
 8000488:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800048c:	e73b      	b.n	8000306 <__udivmoddi4+0xfe>
 800048e:	4637      	mov	r7, r6
 8000490:	4630      	mov	r0, r6
 8000492:	e709      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000494:	4607      	mov	r7, r0
 8000496:	e6e7      	b.n	8000268 <__udivmoddi4+0x60>
 8000498:	4618      	mov	r0, r3
 800049a:	e6fb      	b.n	8000294 <__udivmoddi4+0x8c>
 800049c:	4541      	cmp	r1, r8
 800049e:	d2ab      	bcs.n	80003f8 <__udivmoddi4+0x1f0>
 80004a0:	ebb8 0a02 	subs.w	sl, r8, r2
 80004a4:	eb69 020e 	sbc.w	r2, r9, lr
 80004a8:	3801      	subs	r0, #1
 80004aa:	4613      	mov	r3, r2
 80004ac:	e7a4      	b.n	80003f8 <__udivmoddi4+0x1f0>
 80004ae:	4660      	mov	r0, ip
 80004b0:	e7e9      	b.n	8000486 <__udivmoddi4+0x27e>
 80004b2:	4618      	mov	r0, r3
 80004b4:	e795      	b.n	80003e2 <__udivmoddi4+0x1da>
 80004b6:	4667      	mov	r7, ip
 80004b8:	e7d1      	b.n	800045e <__udivmoddi4+0x256>
 80004ba:	4681      	mov	r9, r0
 80004bc:	e77c      	b.n	80003b8 <__udivmoddi4+0x1b0>
 80004be:	3802      	subs	r0, #2
 80004c0:	442c      	add	r4, r5
 80004c2:	e747      	b.n	8000354 <__udivmoddi4+0x14c>
 80004c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c8:	442b      	add	r3, r5
 80004ca:	e72f      	b.n	800032c <__udivmoddi4+0x124>
 80004cc:	4638      	mov	r0, r7
 80004ce:	e708      	b.n	80002e2 <__udivmoddi4+0xda>
 80004d0:	4637      	mov	r7, r6
 80004d2:	e6e9      	b.n	80002a8 <__udivmoddi4+0xa0>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d8:	b590      	push	{r4, r7, lr}
 80004da:	b087      	sub	sp, #28
 80004dc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004de:	f000 fbdf 	bl	8000ca0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004e2:	f000 f833 	bl	800054c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004e6:	f000 f911 	bl	800070c <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80004ea:	f000 f8e5 	bl	80006b8 <MX_USART1_UART_Init>
  MX_TIM3_Init();
 80004ee:	f000 f895 	bl	800061c <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */



  char sendMessage[]="send message\r\n";
 80004f2:	4b12      	ldr	r3, [pc, #72]	; (800053c <main+0x64>)
 80004f4:	f107 0408 	add.w	r4, r7, #8
 80004f8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80004fa:	c407      	stmia	r4!, {r0, r1, r2}
 80004fc:	8023      	strh	r3, [r4, #0]
 80004fe:	3402      	adds	r4, #2
 8000500:	0c1b      	lsrs	r3, r3, #16
 8000502:	7023      	strb	r3, [r4, #0]
  char newLine[]="\r\n";
 8000504:	4a0e      	ldr	r2, [pc, #56]	; (8000540 <main+0x68>)
 8000506:	1d3b      	adds	r3, r7, #4
 8000508:	6812      	ldr	r2, [r2, #0]
 800050a:	4611      	mov	r1, r2
 800050c:	8019      	strh	r1, [r3, #0]
 800050e:	3302      	adds	r3, #2
 8000510:	0c12      	lsrs	r2, r2, #16
 8000512:	701a      	strb	r2, [r3, #0]

  screenClear();
 8000514:	f000 f966 	bl	80007e4 <screenClear>

  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8000518:	2200      	movs	r2, #0
 800051a:	f24e 0102 	movw	r1, #57346	; 0xe002
 800051e:	4809      	ldr	r0, [pc, #36]	; (8000544 <main+0x6c>)
 8000520:	f000 fefe 	bl	8001320 <HAL_GPIO_WritePin>
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	 // key = keyPadScan();
	  if(key != 0){
 8000524:	4b08      	ldr	r3, [pc, #32]	; (8000548 <main+0x70>)
 8000526:	881b      	ldrh	r3, [r3, #0]
 8000528:	2b00      	cmp	r3, #0
 800052a:	d0fb      	beq.n	8000524 <main+0x4c>
		  HAL_Delay(100);
 800052c:	2064      	movs	r0, #100	; 0x64
 800052e:	f000 fc29 	bl	8000d84 <HAL_Delay>
		  key = 0;
 8000532:	4b05      	ldr	r3, [pc, #20]	; (8000548 <main+0x70>)
 8000534:	2200      	movs	r2, #0
 8000536:	801a      	strh	r2, [r3, #0]
	  if(key != 0){
 8000538:	e7f4      	b.n	8000524 <main+0x4c>
 800053a:	bf00      	nop
 800053c:	08002d98 	.word	0x08002d98
 8000540:	08002da8 	.word	0x08002da8
 8000544:	40020400 	.word	0x40020400
 8000548:	2000004a 	.word	0x2000004a

0800054c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	b094      	sub	sp, #80	; 0x50
 8000550:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000552:	f107 0320 	add.w	r3, r7, #32
 8000556:	2230      	movs	r2, #48	; 0x30
 8000558:	2100      	movs	r1, #0
 800055a:	4618      	mov	r0, r3
 800055c:	f002 fc08 	bl	8002d70 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000560:	f107 030c 	add.w	r3, r7, #12
 8000564:	2200      	movs	r2, #0
 8000566:	601a      	str	r2, [r3, #0]
 8000568:	605a      	str	r2, [r3, #4]
 800056a:	609a      	str	r2, [r3, #8]
 800056c:	60da      	str	r2, [r3, #12]
 800056e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000570:	2300      	movs	r3, #0
 8000572:	60bb      	str	r3, [r7, #8]
 8000574:	4b27      	ldr	r3, [pc, #156]	; (8000614 <SystemClock_Config+0xc8>)
 8000576:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000578:	4a26      	ldr	r2, [pc, #152]	; (8000614 <SystemClock_Config+0xc8>)
 800057a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800057e:	6413      	str	r3, [r2, #64]	; 0x40
 8000580:	4b24      	ldr	r3, [pc, #144]	; (8000614 <SystemClock_Config+0xc8>)
 8000582:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000584:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000588:	60bb      	str	r3, [r7, #8]
 800058a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800058c:	2300      	movs	r3, #0
 800058e:	607b      	str	r3, [r7, #4]
 8000590:	4b21      	ldr	r3, [pc, #132]	; (8000618 <SystemClock_Config+0xcc>)
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	4a20      	ldr	r2, [pc, #128]	; (8000618 <SystemClock_Config+0xcc>)
 8000596:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800059a:	6013      	str	r3, [r2, #0]
 800059c:	4b1e      	ldr	r3, [pc, #120]	; (8000618 <SystemClock_Config+0xcc>)
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005a4:	607b      	str	r3, [r7, #4]
 80005a6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005a8:	2302      	movs	r3, #2
 80005aa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005ac:	2301      	movs	r3, #1
 80005ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005b0:	2310      	movs	r3, #16
 80005b2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005b4:	2302      	movs	r3, #2
 80005b6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005b8:	2300      	movs	r3, #0
 80005ba:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80005bc:	2308      	movs	r3, #8
 80005be:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 80005c0:	2364      	movs	r3, #100	; 0x64
 80005c2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005c4:	2302      	movs	r3, #2
 80005c6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80005c8:	2304      	movs	r3, #4
 80005ca:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005cc:	f107 0320 	add.w	r3, r7, #32
 80005d0:	4618      	mov	r0, r3
 80005d2:	f000 fee3 	bl	800139c <HAL_RCC_OscConfig>
 80005d6:	4603      	mov	r3, r0
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d001      	beq.n	80005e0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80005dc:	f000 f918 	bl	8000810 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005e0:	230f      	movs	r3, #15
 80005e2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005e4:	2302      	movs	r3, #2
 80005e6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005e8:	2300      	movs	r3, #0
 80005ea:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005f0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005f2:	2300      	movs	r3, #0
 80005f4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80005f6:	f107 030c 	add.w	r3, r7, #12
 80005fa:	2103      	movs	r1, #3
 80005fc:	4618      	mov	r0, r3
 80005fe:	f001 f93d 	bl	800187c <HAL_RCC_ClockConfig>
 8000602:	4603      	mov	r3, r0
 8000604:	2b00      	cmp	r3, #0
 8000606:	d001      	beq.n	800060c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000608:	f000 f902 	bl	8000810 <Error_Handler>
  }
}
 800060c:	bf00      	nop
 800060e:	3750      	adds	r7, #80	; 0x50
 8000610:	46bd      	mov	sp, r7
 8000612:	bd80      	pop	{r7, pc}
 8000614:	40023800 	.word	0x40023800
 8000618:	40007000 	.word	0x40007000

0800061c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b086      	sub	sp, #24
 8000620:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000622:	f107 0308 	add.w	r3, r7, #8
 8000626:	2200      	movs	r2, #0
 8000628:	601a      	str	r2, [r3, #0]
 800062a:	605a      	str	r2, [r3, #4]
 800062c:	609a      	str	r2, [r3, #8]
 800062e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000630:	463b      	mov	r3, r7
 8000632:	2200      	movs	r2, #0
 8000634:	601a      	str	r2, [r3, #0]
 8000636:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000638:	4b1d      	ldr	r3, [pc, #116]	; (80006b0 <MX_TIM3_Init+0x94>)
 800063a:	4a1e      	ldr	r2, [pc, #120]	; (80006b4 <MX_TIM3_Init+0x98>)
 800063c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800063e:	4b1c      	ldr	r3, [pc, #112]	; (80006b0 <MX_TIM3_Init+0x94>)
 8000640:	2200      	movs	r2, #0
 8000642:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000644:	4b1a      	ldr	r3, [pc, #104]	; (80006b0 <MX_TIM3_Init+0x94>)
 8000646:	2200      	movs	r2, #0
 8000648:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800064a:	4b19      	ldr	r3, [pc, #100]	; (80006b0 <MX_TIM3_Init+0x94>)
 800064c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000650:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000652:	4b17      	ldr	r3, [pc, #92]	; (80006b0 <MX_TIM3_Init+0x94>)
 8000654:	2200      	movs	r2, #0
 8000656:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000658:	4b15      	ldr	r3, [pc, #84]	; (80006b0 <MX_TIM3_Init+0x94>)
 800065a:	2200      	movs	r2, #0
 800065c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800065e:	4814      	ldr	r0, [pc, #80]	; (80006b0 <MX_TIM3_Init+0x94>)
 8000660:	f001 fafe 	bl	8001c60 <HAL_TIM_Base_Init>
 8000664:	4603      	mov	r3, r0
 8000666:	2b00      	cmp	r3, #0
 8000668:	d001      	beq.n	800066e <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 800066a:	f000 f8d1 	bl	8000810 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800066e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000672:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000674:	f107 0308 	add.w	r3, r7, #8
 8000678:	4619      	mov	r1, r3
 800067a:	480d      	ldr	r0, [pc, #52]	; (80006b0 <MX_TIM3_Init+0x94>)
 800067c:	f001 fc23 	bl	8001ec6 <HAL_TIM_ConfigClockSource>
 8000680:	4603      	mov	r3, r0
 8000682:	2b00      	cmp	r3, #0
 8000684:	d001      	beq.n	800068a <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8000686:	f000 f8c3 	bl	8000810 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800068a:	2300      	movs	r3, #0
 800068c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800068e:	2300      	movs	r3, #0
 8000690:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000692:	463b      	mov	r3, r7
 8000694:	4619      	mov	r1, r3
 8000696:	4806      	ldr	r0, [pc, #24]	; (80006b0 <MX_TIM3_Init+0x94>)
 8000698:	f001 fe18 	bl	80022cc <HAL_TIMEx_MasterConfigSynchronization>
 800069c:	4603      	mov	r3, r0
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d001      	beq.n	80006a6 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 80006a2:	f000 f8b5 	bl	8000810 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80006a6:	bf00      	nop
 80006a8:	3718      	adds	r7, #24
 80006aa:	46bd      	mov	sp, r7
 80006ac:	bd80      	pop	{r7, pc}
 80006ae:	bf00      	nop
 80006b0:	2000004c 	.word	0x2000004c
 80006b4:	40000400 	.word	0x40000400

080006b8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80006bc:	4b11      	ldr	r3, [pc, #68]	; (8000704 <MX_USART1_UART_Init+0x4c>)
 80006be:	4a12      	ldr	r2, [pc, #72]	; (8000708 <MX_USART1_UART_Init+0x50>)
 80006c0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80006c2:	4b10      	ldr	r3, [pc, #64]	; (8000704 <MX_USART1_UART_Init+0x4c>)
 80006c4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80006c8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80006ca:	4b0e      	ldr	r3, [pc, #56]	; (8000704 <MX_USART1_UART_Init+0x4c>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80006d0:	4b0c      	ldr	r3, [pc, #48]	; (8000704 <MX_USART1_UART_Init+0x4c>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80006d6:	4b0b      	ldr	r3, [pc, #44]	; (8000704 <MX_USART1_UART_Init+0x4c>)
 80006d8:	2200      	movs	r2, #0
 80006da:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80006dc:	4b09      	ldr	r3, [pc, #36]	; (8000704 <MX_USART1_UART_Init+0x4c>)
 80006de:	220c      	movs	r2, #12
 80006e0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006e2:	4b08      	ldr	r3, [pc, #32]	; (8000704 <MX_USART1_UART_Init+0x4c>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80006e8:	4b06      	ldr	r3, [pc, #24]	; (8000704 <MX_USART1_UART_Init+0x4c>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80006ee:	4805      	ldr	r0, [pc, #20]	; (8000704 <MX_USART1_UART_Init+0x4c>)
 80006f0:	f001 fe6e 	bl	80023d0 <HAL_UART_Init>
 80006f4:	4603      	mov	r3, r0
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d001      	beq.n	80006fe <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80006fa:	f000 f889 	bl	8000810 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80006fe:	bf00      	nop
 8000700:	bd80      	pop	{r7, pc}
 8000702:	bf00      	nop
 8000704:	2000008c 	.word	0x2000008c
 8000708:	40011000 	.word	0x40011000

0800070c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b088      	sub	sp, #32
 8000710:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000712:	f107 030c 	add.w	r3, r7, #12
 8000716:	2200      	movs	r2, #0
 8000718:	601a      	str	r2, [r3, #0]
 800071a:	605a      	str	r2, [r3, #4]
 800071c:	609a      	str	r2, [r3, #8]
 800071e:	60da      	str	r2, [r3, #12]
 8000720:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000722:	2300      	movs	r3, #0
 8000724:	60bb      	str	r3, [r7, #8]
 8000726:	4b2b      	ldr	r3, [pc, #172]	; (80007d4 <MX_GPIO_Init+0xc8>)
 8000728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072a:	4a2a      	ldr	r2, [pc, #168]	; (80007d4 <MX_GPIO_Init+0xc8>)
 800072c:	f043 0304 	orr.w	r3, r3, #4
 8000730:	6313      	str	r3, [r2, #48]	; 0x30
 8000732:	4b28      	ldr	r3, [pc, #160]	; (80007d4 <MX_GPIO_Init+0xc8>)
 8000734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000736:	f003 0304 	and.w	r3, r3, #4
 800073a:	60bb      	str	r3, [r7, #8]
 800073c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800073e:	2300      	movs	r3, #0
 8000740:	607b      	str	r3, [r7, #4]
 8000742:	4b24      	ldr	r3, [pc, #144]	; (80007d4 <MX_GPIO_Init+0xc8>)
 8000744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000746:	4a23      	ldr	r2, [pc, #140]	; (80007d4 <MX_GPIO_Init+0xc8>)
 8000748:	f043 0302 	orr.w	r3, r3, #2
 800074c:	6313      	str	r3, [r2, #48]	; 0x30
 800074e:	4b21      	ldr	r3, [pc, #132]	; (80007d4 <MX_GPIO_Init+0xc8>)
 8000750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000752:	f003 0302 	and.w	r3, r3, #2
 8000756:	607b      	str	r3, [r7, #4]
 8000758:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800075a:	2300      	movs	r3, #0
 800075c:	603b      	str	r3, [r7, #0]
 800075e:	4b1d      	ldr	r3, [pc, #116]	; (80007d4 <MX_GPIO_Init+0xc8>)
 8000760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000762:	4a1c      	ldr	r2, [pc, #112]	; (80007d4 <MX_GPIO_Init+0xc8>)
 8000764:	f043 0301 	orr.w	r3, r3, #1
 8000768:	6313      	str	r3, [r2, #48]	; 0x30
 800076a:	4b1a      	ldr	r3, [pc, #104]	; (80007d4 <MX_GPIO_Init+0xc8>)
 800076c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076e:	f003 0301 	and.w	r3, r3, #1
 8000772:	603b      	str	r3, [r7, #0]
 8000774:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8000776:	2200      	movs	r2, #0
 8000778:	f24e 0102 	movw	r1, #57346	; 0xe002
 800077c:	4816      	ldr	r0, [pc, #88]	; (80007d8 <MX_GPIO_Init+0xcc>)
 800077e:	f000 fdcf 	bl	8001320 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC5 PC6 PC7 PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
 8000782:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8000786:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000788:	4b14      	ldr	r3, [pc, #80]	; (80007dc <MX_GPIO_Init+0xd0>)
 800078a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800078c:	2301      	movs	r3, #1
 800078e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000790:	f107 030c 	add.w	r3, r7, #12
 8000794:	4619      	mov	r1, r3
 8000796:	4812      	ldr	r0, [pc, #72]	; (80007e0 <MX_GPIO_Init+0xd4>)
 8000798:	f000 fc28 	bl	8000fec <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800079c:	f24e 0302 	movw	r3, #57346	; 0xe002
 80007a0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007a2:	2301      	movs	r3, #1
 80007a4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a6:	2300      	movs	r3, #0
 80007a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007aa:	2300      	movs	r3, #0
 80007ac:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007ae:	f107 030c 	add.w	r3, r7, #12
 80007b2:	4619      	mov	r1, r3
 80007b4:	4808      	ldr	r0, [pc, #32]	; (80007d8 <MX_GPIO_Init+0xcc>)
 80007b6:	f000 fc19 	bl	8000fec <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80007ba:	2200      	movs	r2, #0
 80007bc:	2100      	movs	r1, #0
 80007be:	2017      	movs	r0, #23
 80007c0:	f000 fbdd 	bl	8000f7e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80007c4:	2017      	movs	r0, #23
 80007c6:	f000 fbf6 	bl	8000fb6 <HAL_NVIC_EnableIRQ>

}
 80007ca:	bf00      	nop
 80007cc:	3720      	adds	r7, #32
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bd80      	pop	{r7, pc}
 80007d2:	bf00      	nop
 80007d4:	40023800 	.word	0x40023800
 80007d8:	40020400 	.word	0x40020400
 80007dc:	10210000 	.word	0x10210000
 80007e0:	40020800 	.word	0x40020800

080007e4 <screenClear>:

/* USER CODE BEGIN 4 */
void screenClear(void){
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b082      	sub	sp, #8
 80007e8:	af00      	add	r7, sp, #0
	uint8_t clearInstruction[]={0x7C, 0x2D};
 80007ea:	4b07      	ldr	r3, [pc, #28]	; (8000808 <screenClear+0x24>)
 80007ec:	881b      	ldrh	r3, [r3, #0]
 80007ee:	80bb      	strh	r3, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t *) clearInstruction, sizeof(clearInstruction), HAL_MAX_DELAY);
 80007f0:	1d39      	adds	r1, r7, #4
 80007f2:	f04f 33ff 	mov.w	r3, #4294967295
 80007f6:	2202      	movs	r2, #2
 80007f8:	4804      	ldr	r0, [pc, #16]	; (800080c <screenClear+0x28>)
 80007fa:	f001 fe36 	bl	800246a <HAL_UART_Transmit>

}
 80007fe:	bf00      	nop
 8000800:	3708      	adds	r7, #8
 8000802:	46bd      	mov	sp, r7
 8000804:	bd80      	pop	{r7, pc}
 8000806:	bf00      	nop
 8000808:	08002dac 	.word	0x08002dac
 800080c:	2000008c 	.word	0x2000008c

08000810 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000810:	b480      	push	{r7}
 8000812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000814:	bf00      	nop
 8000816:	46bd      	mov	sp, r7
 8000818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081c:	4770      	bx	lr
	...

08000820 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b082      	sub	sp, #8
 8000824:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000826:	2300      	movs	r3, #0
 8000828:	607b      	str	r3, [r7, #4]
 800082a:	4b10      	ldr	r3, [pc, #64]	; (800086c <HAL_MspInit+0x4c>)
 800082c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800082e:	4a0f      	ldr	r2, [pc, #60]	; (800086c <HAL_MspInit+0x4c>)
 8000830:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000834:	6453      	str	r3, [r2, #68]	; 0x44
 8000836:	4b0d      	ldr	r3, [pc, #52]	; (800086c <HAL_MspInit+0x4c>)
 8000838:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800083a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800083e:	607b      	str	r3, [r7, #4]
 8000840:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000842:	2300      	movs	r3, #0
 8000844:	603b      	str	r3, [r7, #0]
 8000846:	4b09      	ldr	r3, [pc, #36]	; (800086c <HAL_MspInit+0x4c>)
 8000848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800084a:	4a08      	ldr	r2, [pc, #32]	; (800086c <HAL_MspInit+0x4c>)
 800084c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000850:	6413      	str	r3, [r2, #64]	; 0x40
 8000852:	4b06      	ldr	r3, [pc, #24]	; (800086c <HAL_MspInit+0x4c>)
 8000854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000856:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800085a:	603b      	str	r3, [r7, #0]
 800085c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800085e:	2007      	movs	r0, #7
 8000860:	f000 fb82 	bl	8000f68 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000864:	bf00      	nop
 8000866:	3708      	adds	r7, #8
 8000868:	46bd      	mov	sp, r7
 800086a:	bd80      	pop	{r7, pc}
 800086c:	40023800 	.word	0x40023800

08000870 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b084      	sub	sp, #16
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	4a0e      	ldr	r2, [pc, #56]	; (80008b8 <HAL_TIM_Base_MspInit+0x48>)
 800087e:	4293      	cmp	r3, r2
 8000880:	d115      	bne.n	80008ae <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000882:	2300      	movs	r3, #0
 8000884:	60fb      	str	r3, [r7, #12]
 8000886:	4b0d      	ldr	r3, [pc, #52]	; (80008bc <HAL_TIM_Base_MspInit+0x4c>)
 8000888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800088a:	4a0c      	ldr	r2, [pc, #48]	; (80008bc <HAL_TIM_Base_MspInit+0x4c>)
 800088c:	f043 0302 	orr.w	r3, r3, #2
 8000890:	6413      	str	r3, [r2, #64]	; 0x40
 8000892:	4b0a      	ldr	r3, [pc, #40]	; (80008bc <HAL_TIM_Base_MspInit+0x4c>)
 8000894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000896:	f003 0302 	and.w	r3, r3, #2
 800089a:	60fb      	str	r3, [r7, #12]
 800089c:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800089e:	2200      	movs	r2, #0
 80008a0:	2100      	movs	r1, #0
 80008a2:	201d      	movs	r0, #29
 80008a4:	f000 fb6b 	bl	8000f7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80008a8:	201d      	movs	r0, #29
 80008aa:	f000 fb84 	bl	8000fb6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80008ae:	bf00      	nop
 80008b0:	3710      	adds	r7, #16
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	bf00      	nop
 80008b8:	40000400 	.word	0x40000400
 80008bc:	40023800 	.word	0x40023800

080008c0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b08a      	sub	sp, #40	; 0x28
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008c8:	f107 0314 	add.w	r3, r7, #20
 80008cc:	2200      	movs	r2, #0
 80008ce:	601a      	str	r2, [r3, #0]
 80008d0:	605a      	str	r2, [r3, #4]
 80008d2:	609a      	str	r2, [r3, #8]
 80008d4:	60da      	str	r2, [r3, #12]
 80008d6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	4a19      	ldr	r2, [pc, #100]	; (8000944 <HAL_UART_MspInit+0x84>)
 80008de:	4293      	cmp	r3, r2
 80008e0:	d12c      	bne.n	800093c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80008e2:	2300      	movs	r3, #0
 80008e4:	613b      	str	r3, [r7, #16]
 80008e6:	4b18      	ldr	r3, [pc, #96]	; (8000948 <HAL_UART_MspInit+0x88>)
 80008e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008ea:	4a17      	ldr	r2, [pc, #92]	; (8000948 <HAL_UART_MspInit+0x88>)
 80008ec:	f043 0310 	orr.w	r3, r3, #16
 80008f0:	6453      	str	r3, [r2, #68]	; 0x44
 80008f2:	4b15      	ldr	r3, [pc, #84]	; (8000948 <HAL_UART_MspInit+0x88>)
 80008f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008f6:	f003 0310 	and.w	r3, r3, #16
 80008fa:	613b      	str	r3, [r7, #16]
 80008fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008fe:	2300      	movs	r3, #0
 8000900:	60fb      	str	r3, [r7, #12]
 8000902:	4b11      	ldr	r3, [pc, #68]	; (8000948 <HAL_UART_MspInit+0x88>)
 8000904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000906:	4a10      	ldr	r2, [pc, #64]	; (8000948 <HAL_UART_MspInit+0x88>)
 8000908:	f043 0301 	orr.w	r3, r3, #1
 800090c:	6313      	str	r3, [r2, #48]	; 0x30
 800090e:	4b0e      	ldr	r3, [pc, #56]	; (8000948 <HAL_UART_MspInit+0x88>)
 8000910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000912:	f003 0301 	and.w	r3, r3, #1
 8000916:	60fb      	str	r3, [r7, #12]
 8000918:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800091a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800091e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000920:	2302      	movs	r3, #2
 8000922:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000924:	2300      	movs	r3, #0
 8000926:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000928:	2303      	movs	r3, #3
 800092a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800092c:	2307      	movs	r3, #7
 800092e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000930:	f107 0314 	add.w	r3, r7, #20
 8000934:	4619      	mov	r1, r3
 8000936:	4805      	ldr	r0, [pc, #20]	; (800094c <HAL_UART_MspInit+0x8c>)
 8000938:	f000 fb58 	bl	8000fec <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800093c:	bf00      	nop
 800093e:	3728      	adds	r7, #40	; 0x28
 8000940:	46bd      	mov	sp, r7
 8000942:	bd80      	pop	{r7, pc}
 8000944:	40011000 	.word	0x40011000
 8000948:	40023800 	.word	0x40023800
 800094c:	40020000 	.word	0x40020000

08000950 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000950:	b480      	push	{r7}
 8000952:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000954:	bf00      	nop
 8000956:	46bd      	mov	sp, r7
 8000958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095c:	4770      	bx	lr

0800095e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800095e:	b480      	push	{r7}
 8000960:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000962:	e7fe      	b.n	8000962 <HardFault_Handler+0x4>

08000964 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000964:	b480      	push	{r7}
 8000966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000968:	e7fe      	b.n	8000968 <MemManage_Handler+0x4>

0800096a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800096a:	b480      	push	{r7}
 800096c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800096e:	e7fe      	b.n	800096e <BusFault_Handler+0x4>

08000970 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000970:	b480      	push	{r7}
 8000972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000974:	e7fe      	b.n	8000974 <UsageFault_Handler+0x4>

08000976 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000976:	b480      	push	{r7}
 8000978:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800097a:	bf00      	nop
 800097c:	46bd      	mov	sp, r7
 800097e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000982:	4770      	bx	lr

08000984 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000984:	b480      	push	{r7}
 8000986:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000988:	bf00      	nop
 800098a:	46bd      	mov	sp, r7
 800098c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000990:	4770      	bx	lr

08000992 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000992:	b480      	push	{r7}
 8000994:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000996:	bf00      	nop
 8000998:	46bd      	mov	sp, r7
 800099a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099e:	4770      	bx	lr

080009a0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009a4:	f000 f9ce 	bl	8000d44 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009a8:	bf00      	nop
 80009aa:	bd80      	pop	{r7, pc}

080009ac <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b082      	sub	sp, #8
 80009b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */
	key = 0;
 80009b2:	4b4e      	ldr	r3, [pc, #312]	; (8000aec <EXTI9_5_IRQHandler+0x140>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	801a      	strh	r2, [r3, #0]
	for(uint8_t c=0 ; c<4 ; c++){
 80009b8:	2300      	movs	r3, #0
 80009ba:	71fb      	strb	r3, [r7, #7]
 80009bc:	e072      	b.n	8000aa4 <EXTI9_5_IRQHandler+0xf8>
		for(uint8_t i=0 ; i<4 ; i++){
 80009be:	2300      	movs	r3, #0
 80009c0:	71bb      	strb	r3, [r7, #6]
 80009c2:	e00e      	b.n	80009e2 <EXTI9_5_IRQHandler+0x36>
			HAL_GPIO_WritePin((GPIO_TypeDef*)_KEYPAD_COLUMN_GPIO_PORT[i], _KEYPAD_COLUMN_GPIO_PIN[i], GPIO_PIN_SET);
 80009c4:	79bb      	ldrb	r3, [r7, #6]
 80009c6:	4a4a      	ldr	r2, [pc, #296]	; (8000af0 <EXTI9_5_IRQHandler+0x144>)
 80009c8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80009cc:	79bb      	ldrb	r3, [r7, #6]
 80009ce:	4a49      	ldr	r2, [pc, #292]	; (8000af4 <EXTI9_5_IRQHandler+0x148>)
 80009d0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80009d4:	2201      	movs	r2, #1
 80009d6:	4619      	mov	r1, r3
 80009d8:	f000 fca2 	bl	8001320 <HAL_GPIO_WritePin>
		for(uint8_t i=0 ; i<4 ; i++){
 80009dc:	79bb      	ldrb	r3, [r7, #6]
 80009de:	3301      	adds	r3, #1
 80009e0:	71bb      	strb	r3, [r7, #6]
 80009e2:	79bb      	ldrb	r3, [r7, #6]
 80009e4:	2b03      	cmp	r3, #3
 80009e6:	d9ed      	bls.n	80009c4 <EXTI9_5_IRQHandler+0x18>
		}
		HAL_GPIO_WritePin((GPIO_TypeDef*)_KEYPAD_COLUMN_GPIO_PORT[c], _KEYPAD_COLUMN_GPIO_PIN[c], GPIO_PIN_RESET);
 80009e8:	79fb      	ldrb	r3, [r7, #7]
 80009ea:	4a41      	ldr	r2, [pc, #260]	; (8000af0 <EXTI9_5_IRQHandler+0x144>)
 80009ec:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80009f0:	79fb      	ldrb	r3, [r7, #7]
 80009f2:	4a40      	ldr	r2, [pc, #256]	; (8000af4 <EXTI9_5_IRQHandler+0x148>)
 80009f4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80009f8:	2200      	movs	r2, #0
 80009fa:	4619      	mov	r1, r3
 80009fc:	f000 fc90 	bl	8001320 <HAL_GPIO_WritePin>
		for(uint8_t r=0 ; r<4 ; r++){
 8000a00:	2300      	movs	r3, #0
 8000a02:	717b      	strb	r3, [r7, #5]
 8000a04:	e048      	b.n	8000a98 <EXTI9_5_IRQHandler+0xec>
			if(HAL_GPIO_ReadPin((GPIO_TypeDef*)_KEYPAD_ROW_GPIO_PORT[r], _KEYPAD_ROW_GPIO_PIN[r]) == GPIO_PIN_RESET){
 8000a06:	797b      	ldrb	r3, [r7, #5]
 8000a08:	4a3b      	ldr	r2, [pc, #236]	; (8000af8 <EXTI9_5_IRQHandler+0x14c>)
 8000a0a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000a0e:	797b      	ldrb	r3, [r7, #5]
 8000a10:	4a3a      	ldr	r2, [pc, #232]	; (8000afc <EXTI9_5_IRQHandler+0x150>)
 8000a12:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000a16:	4619      	mov	r1, r3
 8000a18:	f000 fc6a 	bl	80012f0 <HAL_GPIO_ReadPin>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d137      	bne.n	8000a92 <EXTI9_5_IRQHandler+0xe6>
				if(HAL_GPIO_ReadPin((GPIO_TypeDef*)_KEYPAD_ROW_GPIO_PORT[r], _KEYPAD_ROW_GPIO_PIN[r]) == GPIO_PIN_RESET){
 8000a22:	797b      	ldrb	r3, [r7, #5]
 8000a24:	4a34      	ldr	r2, [pc, #208]	; (8000af8 <EXTI9_5_IRQHandler+0x14c>)
 8000a26:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000a2a:	797b      	ldrb	r3, [r7, #5]
 8000a2c:	4a33      	ldr	r2, [pc, #204]	; (8000afc <EXTI9_5_IRQHandler+0x150>)
 8000a2e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000a32:	4619      	mov	r1, r3
 8000a34:	f000 fc5c 	bl	80012f0 <HAL_GPIO_ReadPin>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d129      	bne.n	8000a92 <EXTI9_5_IRQHandler+0xe6>
					key |= 1<<c;
 8000a3e:	79fb      	ldrb	r3, [r7, #7]
 8000a40:	2201      	movs	r2, #1
 8000a42:	fa02 f303 	lsl.w	r3, r2, r3
 8000a46:	b21a      	sxth	r2, r3
 8000a48:	4b28      	ldr	r3, [pc, #160]	; (8000aec <EXTI9_5_IRQHandler+0x140>)
 8000a4a:	881b      	ldrh	r3, [r3, #0]
 8000a4c:	b21b      	sxth	r3, r3
 8000a4e:	4313      	orrs	r3, r2
 8000a50:	b21b      	sxth	r3, r3
 8000a52:	b29a      	uxth	r2, r3
 8000a54:	4b25      	ldr	r3, [pc, #148]	; (8000aec <EXTI9_5_IRQHandler+0x140>)
 8000a56:	801a      	strh	r2, [r3, #0]
					key |= 1<<(r+8);
 8000a58:	797b      	ldrb	r3, [r7, #5]
 8000a5a:	3308      	adds	r3, #8
 8000a5c:	2201      	movs	r2, #1
 8000a5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a62:	b21a      	sxth	r2, r3
 8000a64:	4b21      	ldr	r3, [pc, #132]	; (8000aec <EXTI9_5_IRQHandler+0x140>)
 8000a66:	881b      	ldrh	r3, [r3, #0]
 8000a68:	b21b      	sxth	r3, r3
 8000a6a:	4313      	orrs	r3, r2
 8000a6c:	b21b      	sxth	r3, r3
 8000a6e:	b29a      	uxth	r2, r3
 8000a70:	4b1e      	ldr	r3, [pc, #120]	; (8000aec <EXTI9_5_IRQHandler+0x140>)
 8000a72:	801a      	strh	r2, [r3, #0]
					while(HAL_GPIO_ReadPin((GPIO_TypeDef*)_KEYPAD_ROW_GPIO_PORT[r], _KEYPAD_ROW_GPIO_PIN[r]) == GPIO_PIN_RESET){
 8000a74:	bf00      	nop
 8000a76:	797b      	ldrb	r3, [r7, #5]
 8000a78:	4a1f      	ldr	r2, [pc, #124]	; (8000af8 <EXTI9_5_IRQHandler+0x14c>)
 8000a7a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000a7e:	797b      	ldrb	r3, [r7, #5]
 8000a80:	4a1e      	ldr	r2, [pc, #120]	; (8000afc <EXTI9_5_IRQHandler+0x150>)
 8000a82:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000a86:	4619      	mov	r1, r3
 8000a88:	f000 fc32 	bl	80012f0 <HAL_GPIO_ReadPin>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d0f1      	beq.n	8000a76 <EXTI9_5_IRQHandler+0xca>
		for(uint8_t r=0 ; r<4 ; r++){
 8000a92:	797b      	ldrb	r3, [r7, #5]
 8000a94:	3301      	adds	r3, #1
 8000a96:	717b      	strb	r3, [r7, #5]
 8000a98:	797b      	ldrb	r3, [r7, #5]
 8000a9a:	2b03      	cmp	r3, #3
 8000a9c:	d9b3      	bls.n	8000a06 <EXTI9_5_IRQHandler+0x5a>
	for(uint8_t c=0 ; c<4 ; c++){
 8000a9e:	79fb      	ldrb	r3, [r7, #7]
 8000aa0:	3301      	adds	r3, #1
 8000aa2:	71fb      	strb	r3, [r7, #7]
 8000aa4:	79fb      	ldrb	r3, [r7, #7]
 8000aa6:	2b03      	cmp	r3, #3
 8000aa8:	d989      	bls.n	80009be <EXTI9_5_IRQHandler+0x12>
				}
			}
		}
	}

	keyChar = KeyPadGetChar(key);
 8000aaa:	4b10      	ldr	r3, [pc, #64]	; (8000aec <EXTI9_5_IRQHandler+0x140>)
 8000aac:	881b      	ldrh	r3, [r3, #0]
 8000aae:	4618      	mov	r0, r3
 8000ab0:	f000 f834 	bl	8000b1c <KeyPadGetChar>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	461a      	mov	r2, r3
 8000ab8:	4b11      	ldr	r3, [pc, #68]	; (8000b00 <EXTI9_5_IRQHandler+0x154>)
 8000aba:	701a      	strb	r2, [r3, #0]

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8000abc:	2200      	movs	r2, #0
 8000abe:	f24e 0102 	movw	r1, #57346	; 0xe002
 8000ac2:	4810      	ldr	r0, [pc, #64]	; (8000b04 <EXTI9_5_IRQHandler+0x158>)
 8000ac4:	f000 fc2c 	bl	8001320 <HAL_GPIO_WritePin>
  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8000ac8:	2020      	movs	r0, #32
 8000aca:	f000 fc43 	bl	8001354 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8000ace:	2040      	movs	r0, #64	; 0x40
 8000ad0:	f000 fc40 	bl	8001354 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8000ad4:	2080      	movs	r0, #128	; 0x80
 8000ad6:	f000 fc3d 	bl	8001354 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8000ada:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000ade:	f000 fc39 	bl	8001354 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000ae2:	bf00      	nop
 8000ae4:	3708      	adds	r7, #8
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bd80      	pop	{r7, pc}
 8000aea:	bf00      	nop
 8000aec:	2000004a 	.word	0x2000004a
 8000af0:	20000000 	.word	0x20000000
 8000af4:	08002db0 	.word	0x08002db0
 8000af8:	20000010 	.word	0x20000010
 8000afc:	08002db8 	.word	0x08002db8
 8000b00:	20000048 	.word	0x20000048
 8000b04:	40020400 	.word	0x40020400

08000b08 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000b0c:	4802      	ldr	r0, [pc, #8]	; (8000b18 <TIM3_IRQHandler+0x10>)
 8000b0e:	f001 f8d2 	bl	8001cb6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000b12:	bf00      	nop
 8000b14:	bd80      	pop	{r7, pc}
 8000b16:	bf00      	nop
 8000b18:	2000004c 	.word	0x2000004c

08000b1c <KeyPadGetChar>:

/* USER CODE BEGIN 1 */
char KeyPadGetChar(uint16_t	key)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	b083      	sub	sp, #12
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	4603      	mov	r3, r0
 8000b24:	80fb      	strh	r3, [r7, #6]
  switch(key)
 8000b26:	88fb      	ldrh	r3, [r7, #6]
 8000b28:	f5b3 7f02 	cmp.w	r3, #520	; 0x208
 8000b2c:	d06b      	beq.n	8000c06 <KeyPadGetChar+0xea>
 8000b2e:	f5b3 7f02 	cmp.w	r3, #520	; 0x208
 8000b32:	dc23      	bgt.n	8000b7c <KeyPadGetChar+0x60>
 8000b34:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8000b38:	d05b      	beq.n	8000bf2 <KeyPadGetChar+0xd6>
 8000b3a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8000b3e:	dc09      	bgt.n	8000b54 <KeyPadGetChar+0x38>
 8000b40:	f240 1201 	movw	r2, #257	; 0x101
 8000b44:	4293      	cmp	r3, r2
 8000b46:	d044      	beq.n	8000bd2 <KeyPadGetChar+0xb6>
 8000b48:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
 8000b4c:	d049      	beq.n	8000be2 <KeyPadGetChar+0xc6>
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d03d      	beq.n	8000bce <KeyPadGetChar+0xb2>
 8000b52:	e05e      	b.n	8000c12 <KeyPadGetChar+0xf6>
 8000b54:	f240 2201 	movw	r2, #513	; 0x201
 8000b58:	4293      	cmp	r3, r2
 8000b5a:	d03c      	beq.n	8000bd6 <KeyPadGetChar+0xba>
 8000b5c:	f240 2201 	movw	r2, #513	; 0x201
 8000b60:	4293      	cmp	r3, r2
 8000b62:	dc03      	bgt.n	8000b6c <KeyPadGetChar+0x50>
 8000b64:	f5b3 7f84 	cmp.w	r3, #264	; 0x108
 8000b68:	d04b      	beq.n	8000c02 <KeyPadGetChar+0xe6>
 8000b6a:	e052      	b.n	8000c12 <KeyPadGetChar+0xf6>
 8000b6c:	f240 2202 	movw	r2, #514	; 0x202
 8000b70:	4293      	cmp	r3, r2
 8000b72:	d038      	beq.n	8000be6 <KeyPadGetChar+0xca>
 8000b74:	f5b3 7f01 	cmp.w	r3, #516	; 0x204
 8000b78:	d03d      	beq.n	8000bf6 <KeyPadGetChar+0xda>
 8000b7a:	e04a      	b.n	8000c12 <KeyPadGetChar+0xf6>
 8000b7c:	f5b3 6f81 	cmp.w	r3, #1032	; 0x408
 8000b80:	d043      	beq.n	8000c0a <KeyPadGetChar+0xee>
 8000b82:	f5b3 6f81 	cmp.w	r3, #1032	; 0x408
 8000b86:	dc0c      	bgt.n	8000ba2 <KeyPadGetChar+0x86>
 8000b88:	f240 4202 	movw	r2, #1026	; 0x402
 8000b8c:	4293      	cmp	r3, r2
 8000b8e:	d02c      	beq.n	8000bea <KeyPadGetChar+0xce>
 8000b90:	f240 4204 	movw	r2, #1028	; 0x404
 8000b94:	4293      	cmp	r3, r2
 8000b96:	d030      	beq.n	8000bfa <KeyPadGetChar+0xde>
 8000b98:	f240 4201 	movw	r2, #1025	; 0x401
 8000b9c:	4293      	cmp	r3, r2
 8000b9e:	d01c      	beq.n	8000bda <KeyPadGetChar+0xbe>
 8000ba0:	e037      	b.n	8000c12 <KeyPadGetChar+0xf6>
 8000ba2:	f640 0202 	movw	r2, #2050	; 0x802
 8000ba6:	4293      	cmp	r3, r2
 8000ba8:	d021      	beq.n	8000bee <KeyPadGetChar+0xd2>
 8000baa:	f640 0202 	movw	r2, #2050	; 0x802
 8000bae:	4293      	cmp	r3, r2
 8000bb0:	dc04      	bgt.n	8000bbc <KeyPadGetChar+0xa0>
 8000bb2:	f640 0201 	movw	r2, #2049	; 0x801
 8000bb6:	4293      	cmp	r3, r2
 8000bb8:	d011      	beq.n	8000bde <KeyPadGetChar+0xc2>
 8000bba:	e02a      	b.n	8000c12 <KeyPadGetChar+0xf6>
 8000bbc:	f640 0204 	movw	r2, #2052	; 0x804
 8000bc0:	4293      	cmp	r3, r2
 8000bc2:	d01c      	beq.n	8000bfe <KeyPadGetChar+0xe2>
 8000bc4:	f640 0208 	movw	r2, #2056	; 0x808
 8000bc8:	4293      	cmp	r3, r2
 8000bca:	d020      	beq.n	8000c0e <KeyPadGetChar+0xf2>
 8000bcc:	e021      	b.n	8000c12 <KeyPadGetChar+0xf6>
  {
    case 0x0000:
      return 0;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	e020      	b.n	8000c14 <KeyPadGetChar+0xf8>
		case 0x0101:
			return '1';
 8000bd2:	2331      	movs	r3, #49	; 0x31
 8000bd4:	e01e      	b.n	8000c14 <KeyPadGetChar+0xf8>
		case 0x0201:
			return '2';
 8000bd6:	2332      	movs	r3, #50	; 0x32
 8000bd8:	e01c      	b.n	8000c14 <KeyPadGetChar+0xf8>
		case 0x0401:
			return '3';
 8000bda:	2333      	movs	r3, #51	; 0x33
 8000bdc:	e01a      	b.n	8000c14 <KeyPadGetChar+0xf8>
		case 0x0801:
			return 'A';
 8000bde:	2341      	movs	r3, #65	; 0x41
 8000be0:	e018      	b.n	8000c14 <KeyPadGetChar+0xf8>
		case 0x0102:
			return '4';
 8000be2:	2334      	movs	r3, #52	; 0x34
 8000be4:	e016      	b.n	8000c14 <KeyPadGetChar+0xf8>
		case 0x0202:
			return '5';
 8000be6:	2335      	movs	r3, #53	; 0x35
 8000be8:	e014      	b.n	8000c14 <KeyPadGetChar+0xf8>
		case 0x0402:
			return '6';
 8000bea:	2336      	movs	r3, #54	; 0x36
 8000bec:	e012      	b.n	8000c14 <KeyPadGetChar+0xf8>
		case 0x0802:
			return 'B';
 8000bee:	2342      	movs	r3, #66	; 0x42
 8000bf0:	e010      	b.n	8000c14 <KeyPadGetChar+0xf8>
		case 0x0104:
			return '7';
 8000bf2:	2337      	movs	r3, #55	; 0x37
 8000bf4:	e00e      	b.n	8000c14 <KeyPadGetChar+0xf8>
		case 0x0204:
			return '8';
 8000bf6:	2338      	movs	r3, #56	; 0x38
 8000bf8:	e00c      	b.n	8000c14 <KeyPadGetChar+0xf8>
		case 0x0404:
			return '9';
 8000bfa:	2339      	movs	r3, #57	; 0x39
 8000bfc:	e00a      	b.n	8000c14 <KeyPadGetChar+0xf8>
		case 0x0804:
			return 'C';
 8000bfe:	2343      	movs	r3, #67	; 0x43
 8000c00:	e008      	b.n	8000c14 <KeyPadGetChar+0xf8>
		case 0x0108:
			return '*';
 8000c02:	232a      	movs	r3, #42	; 0x2a
 8000c04:	e006      	b.n	8000c14 <KeyPadGetChar+0xf8>
		case 0x0208:
			return '0';
 8000c06:	2330      	movs	r3, #48	; 0x30
 8000c08:	e004      	b.n	8000c14 <KeyPadGetChar+0xf8>
		case 0x0408:
			return '#';
 8000c0a:	2323      	movs	r3, #35	; 0x23
 8000c0c:	e002      	b.n	8000c14 <KeyPadGetChar+0xf8>
		case 0x0808:
			return 'D';
 8000c0e:	2344      	movs	r3, #68	; 0x44
 8000c10:	e000      	b.n	8000c14 <KeyPadGetChar+0xf8>

		default:
			return 0;
 8000c12:	2300      	movs	r3, #0
	}
}
 8000c14:	4618      	mov	r0, r3
 8000c16:	370c      	adds	r7, #12
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1e:	4770      	bx	lr

08000c20 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c20:	b480      	push	{r7}
 8000c22:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c24:	4b08      	ldr	r3, [pc, #32]	; (8000c48 <SystemInit+0x28>)
 8000c26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c2a:	4a07      	ldr	r2, [pc, #28]	; (8000c48 <SystemInit+0x28>)
 8000c2c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c30:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000c34:	4b04      	ldr	r3, [pc, #16]	; (8000c48 <SystemInit+0x28>)
 8000c36:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000c3a:	609a      	str	r2, [r3, #8]
#endif
}
 8000c3c:	bf00      	nop
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop
 8000c48:	e000ed00 	.word	0xe000ed00

08000c4c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000c4c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c84 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000c50:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000c52:	e003      	b.n	8000c5c <LoopCopyDataInit>

08000c54 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000c54:	4b0c      	ldr	r3, [pc, #48]	; (8000c88 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000c56:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000c58:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000c5a:	3104      	adds	r1, #4

08000c5c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000c5c:	480b      	ldr	r0, [pc, #44]	; (8000c8c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000c5e:	4b0c      	ldr	r3, [pc, #48]	; (8000c90 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000c60:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000c62:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000c64:	d3f6      	bcc.n	8000c54 <CopyDataInit>
  ldr  r2, =_sbss
 8000c66:	4a0b      	ldr	r2, [pc, #44]	; (8000c94 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000c68:	e002      	b.n	8000c70 <LoopFillZerobss>

08000c6a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000c6a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000c6c:	f842 3b04 	str.w	r3, [r2], #4

08000c70 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000c70:	4b09      	ldr	r3, [pc, #36]	; (8000c98 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000c72:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000c74:	d3f9      	bcc.n	8000c6a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000c76:	f7ff ffd3 	bl	8000c20 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c7a:	f002 f855 	bl	8002d28 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c7e:	f7ff fc2b 	bl	80004d8 <main>
  bx  lr    
 8000c82:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000c84:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000c88:	08002de8 	.word	0x08002de8
  ldr  r0, =_sdata
 8000c8c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000c90:	2000002c 	.word	0x2000002c
  ldr  r2, =_sbss
 8000c94:	2000002c 	.word	0x2000002c
  ldr  r3, = _ebss
 8000c98:	200000d0 	.word	0x200000d0

08000c9c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c9c:	e7fe      	b.n	8000c9c <ADC_IRQHandler>
	...

08000ca0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ca4:	4b0e      	ldr	r3, [pc, #56]	; (8000ce0 <HAL_Init+0x40>)
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	4a0d      	ldr	r2, [pc, #52]	; (8000ce0 <HAL_Init+0x40>)
 8000caa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000cae:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000cb0:	4b0b      	ldr	r3, [pc, #44]	; (8000ce0 <HAL_Init+0x40>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	4a0a      	ldr	r2, [pc, #40]	; (8000ce0 <HAL_Init+0x40>)
 8000cb6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000cba:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cbc:	4b08      	ldr	r3, [pc, #32]	; (8000ce0 <HAL_Init+0x40>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	4a07      	ldr	r2, [pc, #28]	; (8000ce0 <HAL_Init+0x40>)
 8000cc2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000cc6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cc8:	2003      	movs	r0, #3
 8000cca:	f000 f94d 	bl	8000f68 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cce:	2000      	movs	r0, #0
 8000cd0:	f000 f808 	bl	8000ce4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000cd4:	f7ff fda4 	bl	8000820 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cd8:	2300      	movs	r3, #0
}
 8000cda:	4618      	mov	r0, r3
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	bf00      	nop
 8000ce0:	40023c00 	.word	0x40023c00

08000ce4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b082      	sub	sp, #8
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000cec:	4b12      	ldr	r3, [pc, #72]	; (8000d38 <HAL_InitTick+0x54>)
 8000cee:	681a      	ldr	r2, [r3, #0]
 8000cf0:	4b12      	ldr	r3, [pc, #72]	; (8000d3c <HAL_InitTick+0x58>)
 8000cf2:	781b      	ldrb	r3, [r3, #0]
 8000cf4:	4619      	mov	r1, r3
 8000cf6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cfa:	fbb3 f3f1 	udiv	r3, r3, r1
 8000cfe:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d02:	4618      	mov	r0, r3
 8000d04:	f000 f965 	bl	8000fd2 <HAL_SYSTICK_Config>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d001      	beq.n	8000d12 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d0e:	2301      	movs	r3, #1
 8000d10:	e00e      	b.n	8000d30 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	2b0f      	cmp	r3, #15
 8000d16:	d80a      	bhi.n	8000d2e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d18:	2200      	movs	r2, #0
 8000d1a:	6879      	ldr	r1, [r7, #4]
 8000d1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000d20:	f000 f92d 	bl	8000f7e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d24:	4a06      	ldr	r2, [pc, #24]	; (8000d40 <HAL_InitTick+0x5c>)
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	e000      	b.n	8000d30 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d2e:	2301      	movs	r3, #1
}
 8000d30:	4618      	mov	r0, r3
 8000d32:	3708      	adds	r7, #8
 8000d34:	46bd      	mov	sp, r7
 8000d36:	bd80      	pop	{r7, pc}
 8000d38:	20000020 	.word	0x20000020
 8000d3c:	20000028 	.word	0x20000028
 8000d40:	20000024 	.word	0x20000024

08000d44 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d44:	b480      	push	{r7}
 8000d46:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d48:	4b06      	ldr	r3, [pc, #24]	; (8000d64 <HAL_IncTick+0x20>)
 8000d4a:	781b      	ldrb	r3, [r3, #0]
 8000d4c:	461a      	mov	r2, r3
 8000d4e:	4b06      	ldr	r3, [pc, #24]	; (8000d68 <HAL_IncTick+0x24>)
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	4413      	add	r3, r2
 8000d54:	4a04      	ldr	r2, [pc, #16]	; (8000d68 <HAL_IncTick+0x24>)
 8000d56:	6013      	str	r3, [r2, #0]
}
 8000d58:	bf00      	nop
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d60:	4770      	bx	lr
 8000d62:	bf00      	nop
 8000d64:	20000028 	.word	0x20000028
 8000d68:	200000cc 	.word	0x200000cc

08000d6c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	af00      	add	r7, sp, #0
  return uwTick;
 8000d70:	4b03      	ldr	r3, [pc, #12]	; (8000d80 <HAL_GetTick+0x14>)
 8000d72:	681b      	ldr	r3, [r3, #0]
}
 8000d74:	4618      	mov	r0, r3
 8000d76:	46bd      	mov	sp, r7
 8000d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7c:	4770      	bx	lr
 8000d7e:	bf00      	nop
 8000d80:	200000cc 	.word	0x200000cc

08000d84 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b084      	sub	sp, #16
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d8c:	f7ff ffee 	bl	8000d6c <HAL_GetTick>
 8000d90:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d96:	68fb      	ldr	r3, [r7, #12]
 8000d98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d9c:	d005      	beq.n	8000daa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d9e:	4b09      	ldr	r3, [pc, #36]	; (8000dc4 <HAL_Delay+0x40>)
 8000da0:	781b      	ldrb	r3, [r3, #0]
 8000da2:	461a      	mov	r2, r3
 8000da4:	68fb      	ldr	r3, [r7, #12]
 8000da6:	4413      	add	r3, r2
 8000da8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000daa:	bf00      	nop
 8000dac:	f7ff ffde 	bl	8000d6c <HAL_GetTick>
 8000db0:	4602      	mov	r2, r0
 8000db2:	68bb      	ldr	r3, [r7, #8]
 8000db4:	1ad3      	subs	r3, r2, r3
 8000db6:	68fa      	ldr	r2, [r7, #12]
 8000db8:	429a      	cmp	r2, r3
 8000dba:	d8f7      	bhi.n	8000dac <HAL_Delay+0x28>
  {
  }
}
 8000dbc:	bf00      	nop
 8000dbe:	3710      	adds	r7, #16
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	bd80      	pop	{r7, pc}
 8000dc4:	20000028 	.word	0x20000028

08000dc8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	b085      	sub	sp, #20
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	f003 0307 	and.w	r3, r3, #7
 8000dd6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000dd8:	4b0c      	ldr	r3, [pc, #48]	; (8000e0c <__NVIC_SetPriorityGrouping+0x44>)
 8000dda:	68db      	ldr	r3, [r3, #12]
 8000ddc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000dde:	68ba      	ldr	r2, [r7, #8]
 8000de0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000de4:	4013      	ands	r3, r2
 8000de6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000dec:	68bb      	ldr	r3, [r7, #8]
 8000dee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000df0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000df4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000df8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000dfa:	4a04      	ldr	r2, [pc, #16]	; (8000e0c <__NVIC_SetPriorityGrouping+0x44>)
 8000dfc:	68bb      	ldr	r3, [r7, #8]
 8000dfe:	60d3      	str	r3, [r2, #12]
}
 8000e00:	bf00      	nop
 8000e02:	3714      	adds	r7, #20
 8000e04:	46bd      	mov	sp, r7
 8000e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0a:	4770      	bx	lr
 8000e0c:	e000ed00 	.word	0xe000ed00

08000e10 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e10:	b480      	push	{r7}
 8000e12:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e14:	4b04      	ldr	r3, [pc, #16]	; (8000e28 <__NVIC_GetPriorityGrouping+0x18>)
 8000e16:	68db      	ldr	r3, [r3, #12]
 8000e18:	0a1b      	lsrs	r3, r3, #8
 8000e1a:	f003 0307 	and.w	r3, r3, #7
}
 8000e1e:	4618      	mov	r0, r3
 8000e20:	46bd      	mov	sp, r7
 8000e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e26:	4770      	bx	lr
 8000e28:	e000ed00 	.word	0xe000ed00

08000e2c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	b083      	sub	sp, #12
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	4603      	mov	r3, r0
 8000e34:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	db0b      	blt.n	8000e56 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e3e:	79fb      	ldrb	r3, [r7, #7]
 8000e40:	f003 021f 	and.w	r2, r3, #31
 8000e44:	4907      	ldr	r1, [pc, #28]	; (8000e64 <__NVIC_EnableIRQ+0x38>)
 8000e46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e4a:	095b      	lsrs	r3, r3, #5
 8000e4c:	2001      	movs	r0, #1
 8000e4e:	fa00 f202 	lsl.w	r2, r0, r2
 8000e52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e56:	bf00      	nop
 8000e58:	370c      	adds	r7, #12
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e60:	4770      	bx	lr
 8000e62:	bf00      	nop
 8000e64:	e000e100 	.word	0xe000e100

08000e68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	b083      	sub	sp, #12
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	4603      	mov	r3, r0
 8000e70:	6039      	str	r1, [r7, #0]
 8000e72:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	db0a      	blt.n	8000e92 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e7c:	683b      	ldr	r3, [r7, #0]
 8000e7e:	b2da      	uxtb	r2, r3
 8000e80:	490c      	ldr	r1, [pc, #48]	; (8000eb4 <__NVIC_SetPriority+0x4c>)
 8000e82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e86:	0112      	lsls	r2, r2, #4
 8000e88:	b2d2      	uxtb	r2, r2
 8000e8a:	440b      	add	r3, r1
 8000e8c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e90:	e00a      	b.n	8000ea8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e92:	683b      	ldr	r3, [r7, #0]
 8000e94:	b2da      	uxtb	r2, r3
 8000e96:	4908      	ldr	r1, [pc, #32]	; (8000eb8 <__NVIC_SetPriority+0x50>)
 8000e98:	79fb      	ldrb	r3, [r7, #7]
 8000e9a:	f003 030f 	and.w	r3, r3, #15
 8000e9e:	3b04      	subs	r3, #4
 8000ea0:	0112      	lsls	r2, r2, #4
 8000ea2:	b2d2      	uxtb	r2, r2
 8000ea4:	440b      	add	r3, r1
 8000ea6:	761a      	strb	r2, [r3, #24]
}
 8000ea8:	bf00      	nop
 8000eaa:	370c      	adds	r7, #12
 8000eac:	46bd      	mov	sp, r7
 8000eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb2:	4770      	bx	lr
 8000eb4:	e000e100 	.word	0xe000e100
 8000eb8:	e000ed00 	.word	0xe000ed00

08000ebc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	b089      	sub	sp, #36	; 0x24
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	60f8      	str	r0, [r7, #12]
 8000ec4:	60b9      	str	r1, [r7, #8]
 8000ec6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	f003 0307 	and.w	r3, r3, #7
 8000ece:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ed0:	69fb      	ldr	r3, [r7, #28]
 8000ed2:	f1c3 0307 	rsb	r3, r3, #7
 8000ed6:	2b04      	cmp	r3, #4
 8000ed8:	bf28      	it	cs
 8000eda:	2304      	movcs	r3, #4
 8000edc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ede:	69fb      	ldr	r3, [r7, #28]
 8000ee0:	3304      	adds	r3, #4
 8000ee2:	2b06      	cmp	r3, #6
 8000ee4:	d902      	bls.n	8000eec <NVIC_EncodePriority+0x30>
 8000ee6:	69fb      	ldr	r3, [r7, #28]
 8000ee8:	3b03      	subs	r3, #3
 8000eea:	e000      	b.n	8000eee <NVIC_EncodePriority+0x32>
 8000eec:	2300      	movs	r3, #0
 8000eee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ef0:	f04f 32ff 	mov.w	r2, #4294967295
 8000ef4:	69bb      	ldr	r3, [r7, #24]
 8000ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8000efa:	43da      	mvns	r2, r3
 8000efc:	68bb      	ldr	r3, [r7, #8]
 8000efe:	401a      	ands	r2, r3
 8000f00:	697b      	ldr	r3, [r7, #20]
 8000f02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f04:	f04f 31ff 	mov.w	r1, #4294967295
 8000f08:	697b      	ldr	r3, [r7, #20]
 8000f0a:	fa01 f303 	lsl.w	r3, r1, r3
 8000f0e:	43d9      	mvns	r1, r3
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f14:	4313      	orrs	r3, r2
         );
}
 8000f16:	4618      	mov	r0, r3
 8000f18:	3724      	adds	r7, #36	; 0x24
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f20:	4770      	bx	lr
	...

08000f24 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b082      	sub	sp, #8
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	3b01      	subs	r3, #1
 8000f30:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f34:	d301      	bcc.n	8000f3a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f36:	2301      	movs	r3, #1
 8000f38:	e00f      	b.n	8000f5a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f3a:	4a0a      	ldr	r2, [pc, #40]	; (8000f64 <SysTick_Config+0x40>)
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	3b01      	subs	r3, #1
 8000f40:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f42:	210f      	movs	r1, #15
 8000f44:	f04f 30ff 	mov.w	r0, #4294967295
 8000f48:	f7ff ff8e 	bl	8000e68 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f4c:	4b05      	ldr	r3, [pc, #20]	; (8000f64 <SysTick_Config+0x40>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f52:	4b04      	ldr	r3, [pc, #16]	; (8000f64 <SysTick_Config+0x40>)
 8000f54:	2207      	movs	r2, #7
 8000f56:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f58:	2300      	movs	r3, #0
}
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	3708      	adds	r7, #8
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	e000e010 	.word	0xe000e010

08000f68 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b082      	sub	sp, #8
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f70:	6878      	ldr	r0, [r7, #4]
 8000f72:	f7ff ff29 	bl	8000dc8 <__NVIC_SetPriorityGrouping>
}
 8000f76:	bf00      	nop
 8000f78:	3708      	adds	r7, #8
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}

08000f7e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f7e:	b580      	push	{r7, lr}
 8000f80:	b086      	sub	sp, #24
 8000f82:	af00      	add	r7, sp, #0
 8000f84:	4603      	mov	r3, r0
 8000f86:	60b9      	str	r1, [r7, #8]
 8000f88:	607a      	str	r2, [r7, #4]
 8000f8a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f90:	f7ff ff3e 	bl	8000e10 <__NVIC_GetPriorityGrouping>
 8000f94:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f96:	687a      	ldr	r2, [r7, #4]
 8000f98:	68b9      	ldr	r1, [r7, #8]
 8000f9a:	6978      	ldr	r0, [r7, #20]
 8000f9c:	f7ff ff8e 	bl	8000ebc <NVIC_EncodePriority>
 8000fa0:	4602      	mov	r2, r0
 8000fa2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fa6:	4611      	mov	r1, r2
 8000fa8:	4618      	mov	r0, r3
 8000faa:	f7ff ff5d 	bl	8000e68 <__NVIC_SetPriority>
}
 8000fae:	bf00      	nop
 8000fb0:	3718      	adds	r7, #24
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}

08000fb6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fb6:	b580      	push	{r7, lr}
 8000fb8:	b082      	sub	sp, #8
 8000fba:	af00      	add	r7, sp, #0
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000fc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	f7ff ff31 	bl	8000e2c <__NVIC_EnableIRQ>
}
 8000fca:	bf00      	nop
 8000fcc:	3708      	adds	r7, #8
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}

08000fd2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000fd2:	b580      	push	{r7, lr}
 8000fd4:	b082      	sub	sp, #8
 8000fd6:	af00      	add	r7, sp, #0
 8000fd8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000fda:	6878      	ldr	r0, [r7, #4]
 8000fdc:	f7ff ffa2 	bl	8000f24 <SysTick_Config>
 8000fe0:	4603      	mov	r3, r0
}
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	3708      	adds	r7, #8
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}
	...

08000fec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fec:	b480      	push	{r7}
 8000fee:	b089      	sub	sp, #36	; 0x24
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
 8000ff4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000ffe:	2300      	movs	r3, #0
 8001000:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001002:	2300      	movs	r3, #0
 8001004:	61fb      	str	r3, [r7, #28]
 8001006:	e159      	b.n	80012bc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001008:	2201      	movs	r2, #1
 800100a:	69fb      	ldr	r3, [r7, #28]
 800100c:	fa02 f303 	lsl.w	r3, r2, r3
 8001010:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001012:	683b      	ldr	r3, [r7, #0]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	697a      	ldr	r2, [r7, #20]
 8001018:	4013      	ands	r3, r2
 800101a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800101c:	693a      	ldr	r2, [r7, #16]
 800101e:	697b      	ldr	r3, [r7, #20]
 8001020:	429a      	cmp	r2, r3
 8001022:	f040 8148 	bne.w	80012b6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001026:	683b      	ldr	r3, [r7, #0]
 8001028:	685b      	ldr	r3, [r3, #4]
 800102a:	2b01      	cmp	r3, #1
 800102c:	d00b      	beq.n	8001046 <HAL_GPIO_Init+0x5a>
 800102e:	683b      	ldr	r3, [r7, #0]
 8001030:	685b      	ldr	r3, [r3, #4]
 8001032:	2b02      	cmp	r3, #2
 8001034:	d007      	beq.n	8001046 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001036:	683b      	ldr	r3, [r7, #0]
 8001038:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800103a:	2b11      	cmp	r3, #17
 800103c:	d003      	beq.n	8001046 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800103e:	683b      	ldr	r3, [r7, #0]
 8001040:	685b      	ldr	r3, [r3, #4]
 8001042:	2b12      	cmp	r3, #18
 8001044:	d130      	bne.n	80010a8 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	689b      	ldr	r3, [r3, #8]
 800104a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800104c:	69fb      	ldr	r3, [r7, #28]
 800104e:	005b      	lsls	r3, r3, #1
 8001050:	2203      	movs	r2, #3
 8001052:	fa02 f303 	lsl.w	r3, r2, r3
 8001056:	43db      	mvns	r3, r3
 8001058:	69ba      	ldr	r2, [r7, #24]
 800105a:	4013      	ands	r3, r2
 800105c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800105e:	683b      	ldr	r3, [r7, #0]
 8001060:	68da      	ldr	r2, [r3, #12]
 8001062:	69fb      	ldr	r3, [r7, #28]
 8001064:	005b      	lsls	r3, r3, #1
 8001066:	fa02 f303 	lsl.w	r3, r2, r3
 800106a:	69ba      	ldr	r2, [r7, #24]
 800106c:	4313      	orrs	r3, r2
 800106e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	69ba      	ldr	r2, [r7, #24]
 8001074:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	685b      	ldr	r3, [r3, #4]
 800107a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800107c:	2201      	movs	r2, #1
 800107e:	69fb      	ldr	r3, [r7, #28]
 8001080:	fa02 f303 	lsl.w	r3, r2, r3
 8001084:	43db      	mvns	r3, r3
 8001086:	69ba      	ldr	r2, [r7, #24]
 8001088:	4013      	ands	r3, r2
 800108a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	685b      	ldr	r3, [r3, #4]
 8001090:	091b      	lsrs	r3, r3, #4
 8001092:	f003 0201 	and.w	r2, r3, #1
 8001096:	69fb      	ldr	r3, [r7, #28]
 8001098:	fa02 f303 	lsl.w	r3, r2, r3
 800109c:	69ba      	ldr	r2, [r7, #24]
 800109e:	4313      	orrs	r3, r2
 80010a0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	69ba      	ldr	r2, [r7, #24]
 80010a6:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	68db      	ldr	r3, [r3, #12]
 80010ac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80010ae:	69fb      	ldr	r3, [r7, #28]
 80010b0:	005b      	lsls	r3, r3, #1
 80010b2:	2203      	movs	r2, #3
 80010b4:	fa02 f303 	lsl.w	r3, r2, r3
 80010b8:	43db      	mvns	r3, r3
 80010ba:	69ba      	ldr	r2, [r7, #24]
 80010bc:	4013      	ands	r3, r2
 80010be:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	689a      	ldr	r2, [r3, #8]
 80010c4:	69fb      	ldr	r3, [r7, #28]
 80010c6:	005b      	lsls	r3, r3, #1
 80010c8:	fa02 f303 	lsl.w	r3, r2, r3
 80010cc:	69ba      	ldr	r2, [r7, #24]
 80010ce:	4313      	orrs	r3, r2
 80010d0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	69ba      	ldr	r2, [r7, #24]
 80010d6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	685b      	ldr	r3, [r3, #4]
 80010dc:	2b02      	cmp	r3, #2
 80010de:	d003      	beq.n	80010e8 <HAL_GPIO_Init+0xfc>
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	685b      	ldr	r3, [r3, #4]
 80010e4:	2b12      	cmp	r3, #18
 80010e6:	d123      	bne.n	8001130 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80010e8:	69fb      	ldr	r3, [r7, #28]
 80010ea:	08da      	lsrs	r2, r3, #3
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	3208      	adds	r2, #8
 80010f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80010f6:	69fb      	ldr	r3, [r7, #28]
 80010f8:	f003 0307 	and.w	r3, r3, #7
 80010fc:	009b      	lsls	r3, r3, #2
 80010fe:	220f      	movs	r2, #15
 8001100:	fa02 f303 	lsl.w	r3, r2, r3
 8001104:	43db      	mvns	r3, r3
 8001106:	69ba      	ldr	r2, [r7, #24]
 8001108:	4013      	ands	r3, r2
 800110a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800110c:	683b      	ldr	r3, [r7, #0]
 800110e:	691a      	ldr	r2, [r3, #16]
 8001110:	69fb      	ldr	r3, [r7, #28]
 8001112:	f003 0307 	and.w	r3, r3, #7
 8001116:	009b      	lsls	r3, r3, #2
 8001118:	fa02 f303 	lsl.w	r3, r2, r3
 800111c:	69ba      	ldr	r2, [r7, #24]
 800111e:	4313      	orrs	r3, r2
 8001120:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001122:	69fb      	ldr	r3, [r7, #28]
 8001124:	08da      	lsrs	r2, r3, #3
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	3208      	adds	r2, #8
 800112a:	69b9      	ldr	r1, [r7, #24]
 800112c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001136:	69fb      	ldr	r3, [r7, #28]
 8001138:	005b      	lsls	r3, r3, #1
 800113a:	2203      	movs	r2, #3
 800113c:	fa02 f303 	lsl.w	r3, r2, r3
 8001140:	43db      	mvns	r3, r3
 8001142:	69ba      	ldr	r2, [r7, #24]
 8001144:	4013      	ands	r3, r2
 8001146:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	685b      	ldr	r3, [r3, #4]
 800114c:	f003 0203 	and.w	r2, r3, #3
 8001150:	69fb      	ldr	r3, [r7, #28]
 8001152:	005b      	lsls	r3, r3, #1
 8001154:	fa02 f303 	lsl.w	r3, r2, r3
 8001158:	69ba      	ldr	r2, [r7, #24]
 800115a:	4313      	orrs	r3, r2
 800115c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	69ba      	ldr	r2, [r7, #24]
 8001162:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	685b      	ldr	r3, [r3, #4]
 8001168:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800116c:	2b00      	cmp	r3, #0
 800116e:	f000 80a2 	beq.w	80012b6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001172:	2300      	movs	r3, #0
 8001174:	60fb      	str	r3, [r7, #12]
 8001176:	4b56      	ldr	r3, [pc, #344]	; (80012d0 <HAL_GPIO_Init+0x2e4>)
 8001178:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800117a:	4a55      	ldr	r2, [pc, #340]	; (80012d0 <HAL_GPIO_Init+0x2e4>)
 800117c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001180:	6453      	str	r3, [r2, #68]	; 0x44
 8001182:	4b53      	ldr	r3, [pc, #332]	; (80012d0 <HAL_GPIO_Init+0x2e4>)
 8001184:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001186:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800118a:	60fb      	str	r3, [r7, #12]
 800118c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800118e:	4a51      	ldr	r2, [pc, #324]	; (80012d4 <HAL_GPIO_Init+0x2e8>)
 8001190:	69fb      	ldr	r3, [r7, #28]
 8001192:	089b      	lsrs	r3, r3, #2
 8001194:	3302      	adds	r3, #2
 8001196:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800119a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800119c:	69fb      	ldr	r3, [r7, #28]
 800119e:	f003 0303 	and.w	r3, r3, #3
 80011a2:	009b      	lsls	r3, r3, #2
 80011a4:	220f      	movs	r2, #15
 80011a6:	fa02 f303 	lsl.w	r3, r2, r3
 80011aa:	43db      	mvns	r3, r3
 80011ac:	69ba      	ldr	r2, [r7, #24]
 80011ae:	4013      	ands	r3, r2
 80011b0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	4a48      	ldr	r2, [pc, #288]	; (80012d8 <HAL_GPIO_Init+0x2ec>)
 80011b6:	4293      	cmp	r3, r2
 80011b8:	d019      	beq.n	80011ee <HAL_GPIO_Init+0x202>
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	4a47      	ldr	r2, [pc, #284]	; (80012dc <HAL_GPIO_Init+0x2f0>)
 80011be:	4293      	cmp	r3, r2
 80011c0:	d013      	beq.n	80011ea <HAL_GPIO_Init+0x1fe>
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	4a46      	ldr	r2, [pc, #280]	; (80012e0 <HAL_GPIO_Init+0x2f4>)
 80011c6:	4293      	cmp	r3, r2
 80011c8:	d00d      	beq.n	80011e6 <HAL_GPIO_Init+0x1fa>
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	4a45      	ldr	r2, [pc, #276]	; (80012e4 <HAL_GPIO_Init+0x2f8>)
 80011ce:	4293      	cmp	r3, r2
 80011d0:	d007      	beq.n	80011e2 <HAL_GPIO_Init+0x1f6>
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	4a44      	ldr	r2, [pc, #272]	; (80012e8 <HAL_GPIO_Init+0x2fc>)
 80011d6:	4293      	cmp	r3, r2
 80011d8:	d101      	bne.n	80011de <HAL_GPIO_Init+0x1f2>
 80011da:	2304      	movs	r3, #4
 80011dc:	e008      	b.n	80011f0 <HAL_GPIO_Init+0x204>
 80011de:	2307      	movs	r3, #7
 80011e0:	e006      	b.n	80011f0 <HAL_GPIO_Init+0x204>
 80011e2:	2303      	movs	r3, #3
 80011e4:	e004      	b.n	80011f0 <HAL_GPIO_Init+0x204>
 80011e6:	2302      	movs	r3, #2
 80011e8:	e002      	b.n	80011f0 <HAL_GPIO_Init+0x204>
 80011ea:	2301      	movs	r3, #1
 80011ec:	e000      	b.n	80011f0 <HAL_GPIO_Init+0x204>
 80011ee:	2300      	movs	r3, #0
 80011f0:	69fa      	ldr	r2, [r7, #28]
 80011f2:	f002 0203 	and.w	r2, r2, #3
 80011f6:	0092      	lsls	r2, r2, #2
 80011f8:	4093      	lsls	r3, r2
 80011fa:	69ba      	ldr	r2, [r7, #24]
 80011fc:	4313      	orrs	r3, r2
 80011fe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001200:	4934      	ldr	r1, [pc, #208]	; (80012d4 <HAL_GPIO_Init+0x2e8>)
 8001202:	69fb      	ldr	r3, [r7, #28]
 8001204:	089b      	lsrs	r3, r3, #2
 8001206:	3302      	adds	r3, #2
 8001208:	69ba      	ldr	r2, [r7, #24]
 800120a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800120e:	4b37      	ldr	r3, [pc, #220]	; (80012ec <HAL_GPIO_Init+0x300>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001214:	693b      	ldr	r3, [r7, #16]
 8001216:	43db      	mvns	r3, r3
 8001218:	69ba      	ldr	r2, [r7, #24]
 800121a:	4013      	ands	r3, r2
 800121c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	685b      	ldr	r3, [r3, #4]
 8001222:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001226:	2b00      	cmp	r3, #0
 8001228:	d003      	beq.n	8001232 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800122a:	69ba      	ldr	r2, [r7, #24]
 800122c:	693b      	ldr	r3, [r7, #16]
 800122e:	4313      	orrs	r3, r2
 8001230:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001232:	4a2e      	ldr	r2, [pc, #184]	; (80012ec <HAL_GPIO_Init+0x300>)
 8001234:	69bb      	ldr	r3, [r7, #24]
 8001236:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001238:	4b2c      	ldr	r3, [pc, #176]	; (80012ec <HAL_GPIO_Init+0x300>)
 800123a:	685b      	ldr	r3, [r3, #4]
 800123c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800123e:	693b      	ldr	r3, [r7, #16]
 8001240:	43db      	mvns	r3, r3
 8001242:	69ba      	ldr	r2, [r7, #24]
 8001244:	4013      	ands	r3, r2
 8001246:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	685b      	ldr	r3, [r3, #4]
 800124c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001250:	2b00      	cmp	r3, #0
 8001252:	d003      	beq.n	800125c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001254:	69ba      	ldr	r2, [r7, #24]
 8001256:	693b      	ldr	r3, [r7, #16]
 8001258:	4313      	orrs	r3, r2
 800125a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800125c:	4a23      	ldr	r2, [pc, #140]	; (80012ec <HAL_GPIO_Init+0x300>)
 800125e:	69bb      	ldr	r3, [r7, #24]
 8001260:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001262:	4b22      	ldr	r3, [pc, #136]	; (80012ec <HAL_GPIO_Init+0x300>)
 8001264:	689b      	ldr	r3, [r3, #8]
 8001266:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001268:	693b      	ldr	r3, [r7, #16]
 800126a:	43db      	mvns	r3, r3
 800126c:	69ba      	ldr	r2, [r7, #24]
 800126e:	4013      	ands	r3, r2
 8001270:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001272:	683b      	ldr	r3, [r7, #0]
 8001274:	685b      	ldr	r3, [r3, #4]
 8001276:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800127a:	2b00      	cmp	r3, #0
 800127c:	d003      	beq.n	8001286 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800127e:	69ba      	ldr	r2, [r7, #24]
 8001280:	693b      	ldr	r3, [r7, #16]
 8001282:	4313      	orrs	r3, r2
 8001284:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001286:	4a19      	ldr	r2, [pc, #100]	; (80012ec <HAL_GPIO_Init+0x300>)
 8001288:	69bb      	ldr	r3, [r7, #24]
 800128a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800128c:	4b17      	ldr	r3, [pc, #92]	; (80012ec <HAL_GPIO_Init+0x300>)
 800128e:	68db      	ldr	r3, [r3, #12]
 8001290:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001292:	693b      	ldr	r3, [r7, #16]
 8001294:	43db      	mvns	r3, r3
 8001296:	69ba      	ldr	r2, [r7, #24]
 8001298:	4013      	ands	r3, r2
 800129a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	685b      	ldr	r3, [r3, #4]
 80012a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d003      	beq.n	80012b0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80012a8:	69ba      	ldr	r2, [r7, #24]
 80012aa:	693b      	ldr	r3, [r7, #16]
 80012ac:	4313      	orrs	r3, r2
 80012ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80012b0:	4a0e      	ldr	r2, [pc, #56]	; (80012ec <HAL_GPIO_Init+0x300>)
 80012b2:	69bb      	ldr	r3, [r7, #24]
 80012b4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012b6:	69fb      	ldr	r3, [r7, #28]
 80012b8:	3301      	adds	r3, #1
 80012ba:	61fb      	str	r3, [r7, #28]
 80012bc:	69fb      	ldr	r3, [r7, #28]
 80012be:	2b0f      	cmp	r3, #15
 80012c0:	f67f aea2 	bls.w	8001008 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80012c4:	bf00      	nop
 80012c6:	3724      	adds	r7, #36	; 0x24
 80012c8:	46bd      	mov	sp, r7
 80012ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ce:	4770      	bx	lr
 80012d0:	40023800 	.word	0x40023800
 80012d4:	40013800 	.word	0x40013800
 80012d8:	40020000 	.word	0x40020000
 80012dc:	40020400 	.word	0x40020400
 80012e0:	40020800 	.word	0x40020800
 80012e4:	40020c00 	.word	0x40020c00
 80012e8:	40021000 	.word	0x40021000
 80012ec:	40013c00 	.word	0x40013c00

080012f0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80012f0:	b480      	push	{r7}
 80012f2:	b085      	sub	sp, #20
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
 80012f8:	460b      	mov	r3, r1
 80012fa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	691a      	ldr	r2, [r3, #16]
 8001300:	887b      	ldrh	r3, [r7, #2]
 8001302:	4013      	ands	r3, r2
 8001304:	2b00      	cmp	r3, #0
 8001306:	d002      	beq.n	800130e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001308:	2301      	movs	r3, #1
 800130a:	73fb      	strb	r3, [r7, #15]
 800130c:	e001      	b.n	8001312 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800130e:	2300      	movs	r3, #0
 8001310:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001312:	7bfb      	ldrb	r3, [r7, #15]
}
 8001314:	4618      	mov	r0, r3
 8001316:	3714      	adds	r7, #20
 8001318:	46bd      	mov	sp, r7
 800131a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131e:	4770      	bx	lr

08001320 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001320:	b480      	push	{r7}
 8001322:	b083      	sub	sp, #12
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
 8001328:	460b      	mov	r3, r1
 800132a:	807b      	strh	r3, [r7, #2]
 800132c:	4613      	mov	r3, r2
 800132e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001330:	787b      	ldrb	r3, [r7, #1]
 8001332:	2b00      	cmp	r3, #0
 8001334:	d003      	beq.n	800133e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001336:	887a      	ldrh	r2, [r7, #2]
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800133c:	e003      	b.n	8001346 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800133e:	887b      	ldrh	r3, [r7, #2]
 8001340:	041a      	lsls	r2, r3, #16
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	619a      	str	r2, [r3, #24]
}
 8001346:	bf00      	nop
 8001348:	370c      	adds	r7, #12
 800134a:	46bd      	mov	sp, r7
 800134c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001350:	4770      	bx	lr
	...

08001354 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b082      	sub	sp, #8
 8001358:	af00      	add	r7, sp, #0
 800135a:	4603      	mov	r3, r0
 800135c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800135e:	4b08      	ldr	r3, [pc, #32]	; (8001380 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001360:	695a      	ldr	r2, [r3, #20]
 8001362:	88fb      	ldrh	r3, [r7, #6]
 8001364:	4013      	ands	r3, r2
 8001366:	2b00      	cmp	r3, #0
 8001368:	d006      	beq.n	8001378 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800136a:	4a05      	ldr	r2, [pc, #20]	; (8001380 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800136c:	88fb      	ldrh	r3, [r7, #6]
 800136e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001370:	88fb      	ldrh	r3, [r7, #6]
 8001372:	4618      	mov	r0, r3
 8001374:	f000 f806 	bl	8001384 <HAL_GPIO_EXTI_Callback>
  }
}
 8001378:	bf00      	nop
 800137a:	3708      	adds	r7, #8
 800137c:	46bd      	mov	sp, r7
 800137e:	bd80      	pop	{r7, pc}
 8001380:	40013c00 	.word	0x40013c00

08001384 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001384:	b480      	push	{r7}
 8001386:	b083      	sub	sp, #12
 8001388:	af00      	add	r7, sp, #0
 800138a:	4603      	mov	r3, r0
 800138c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800138e:	bf00      	nop
 8001390:	370c      	adds	r7, #12
 8001392:	46bd      	mov	sp, r7
 8001394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001398:	4770      	bx	lr
	...

0800139c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b086      	sub	sp, #24
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d101      	bne.n	80013ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80013aa:	2301      	movs	r3, #1
 80013ac:	e25b      	b.n	8001866 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f003 0301 	and.w	r3, r3, #1
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d075      	beq.n	80014a6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80013ba:	4ba3      	ldr	r3, [pc, #652]	; (8001648 <HAL_RCC_OscConfig+0x2ac>)
 80013bc:	689b      	ldr	r3, [r3, #8]
 80013be:	f003 030c 	and.w	r3, r3, #12
 80013c2:	2b04      	cmp	r3, #4
 80013c4:	d00c      	beq.n	80013e0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80013c6:	4ba0      	ldr	r3, [pc, #640]	; (8001648 <HAL_RCC_OscConfig+0x2ac>)
 80013c8:	689b      	ldr	r3, [r3, #8]
 80013ca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80013ce:	2b08      	cmp	r3, #8
 80013d0:	d112      	bne.n	80013f8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80013d2:	4b9d      	ldr	r3, [pc, #628]	; (8001648 <HAL_RCC_OscConfig+0x2ac>)
 80013d4:	685b      	ldr	r3, [r3, #4]
 80013d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80013da:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80013de:	d10b      	bne.n	80013f8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013e0:	4b99      	ldr	r3, [pc, #612]	; (8001648 <HAL_RCC_OscConfig+0x2ac>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d05b      	beq.n	80014a4 <HAL_RCC_OscConfig+0x108>
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	685b      	ldr	r3, [r3, #4]
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d157      	bne.n	80014a4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80013f4:	2301      	movs	r3, #1
 80013f6:	e236      	b.n	8001866 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	685b      	ldr	r3, [r3, #4]
 80013fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001400:	d106      	bne.n	8001410 <HAL_RCC_OscConfig+0x74>
 8001402:	4b91      	ldr	r3, [pc, #580]	; (8001648 <HAL_RCC_OscConfig+0x2ac>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	4a90      	ldr	r2, [pc, #576]	; (8001648 <HAL_RCC_OscConfig+0x2ac>)
 8001408:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800140c:	6013      	str	r3, [r2, #0]
 800140e:	e01d      	b.n	800144c <HAL_RCC_OscConfig+0xb0>
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	685b      	ldr	r3, [r3, #4]
 8001414:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001418:	d10c      	bne.n	8001434 <HAL_RCC_OscConfig+0x98>
 800141a:	4b8b      	ldr	r3, [pc, #556]	; (8001648 <HAL_RCC_OscConfig+0x2ac>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	4a8a      	ldr	r2, [pc, #552]	; (8001648 <HAL_RCC_OscConfig+0x2ac>)
 8001420:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001424:	6013      	str	r3, [r2, #0]
 8001426:	4b88      	ldr	r3, [pc, #544]	; (8001648 <HAL_RCC_OscConfig+0x2ac>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	4a87      	ldr	r2, [pc, #540]	; (8001648 <HAL_RCC_OscConfig+0x2ac>)
 800142c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001430:	6013      	str	r3, [r2, #0]
 8001432:	e00b      	b.n	800144c <HAL_RCC_OscConfig+0xb0>
 8001434:	4b84      	ldr	r3, [pc, #528]	; (8001648 <HAL_RCC_OscConfig+0x2ac>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	4a83      	ldr	r2, [pc, #524]	; (8001648 <HAL_RCC_OscConfig+0x2ac>)
 800143a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800143e:	6013      	str	r3, [r2, #0]
 8001440:	4b81      	ldr	r3, [pc, #516]	; (8001648 <HAL_RCC_OscConfig+0x2ac>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	4a80      	ldr	r2, [pc, #512]	; (8001648 <HAL_RCC_OscConfig+0x2ac>)
 8001446:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800144a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	685b      	ldr	r3, [r3, #4]
 8001450:	2b00      	cmp	r3, #0
 8001452:	d013      	beq.n	800147c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001454:	f7ff fc8a 	bl	8000d6c <HAL_GetTick>
 8001458:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800145a:	e008      	b.n	800146e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800145c:	f7ff fc86 	bl	8000d6c <HAL_GetTick>
 8001460:	4602      	mov	r2, r0
 8001462:	693b      	ldr	r3, [r7, #16]
 8001464:	1ad3      	subs	r3, r2, r3
 8001466:	2b64      	cmp	r3, #100	; 0x64
 8001468:	d901      	bls.n	800146e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800146a:	2303      	movs	r3, #3
 800146c:	e1fb      	b.n	8001866 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800146e:	4b76      	ldr	r3, [pc, #472]	; (8001648 <HAL_RCC_OscConfig+0x2ac>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001476:	2b00      	cmp	r3, #0
 8001478:	d0f0      	beq.n	800145c <HAL_RCC_OscConfig+0xc0>
 800147a:	e014      	b.n	80014a6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800147c:	f7ff fc76 	bl	8000d6c <HAL_GetTick>
 8001480:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001482:	e008      	b.n	8001496 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001484:	f7ff fc72 	bl	8000d6c <HAL_GetTick>
 8001488:	4602      	mov	r2, r0
 800148a:	693b      	ldr	r3, [r7, #16]
 800148c:	1ad3      	subs	r3, r2, r3
 800148e:	2b64      	cmp	r3, #100	; 0x64
 8001490:	d901      	bls.n	8001496 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001492:	2303      	movs	r3, #3
 8001494:	e1e7      	b.n	8001866 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001496:	4b6c      	ldr	r3, [pc, #432]	; (8001648 <HAL_RCC_OscConfig+0x2ac>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d1f0      	bne.n	8001484 <HAL_RCC_OscConfig+0xe8>
 80014a2:	e000      	b.n	80014a6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f003 0302 	and.w	r3, r3, #2
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d063      	beq.n	800157a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80014b2:	4b65      	ldr	r3, [pc, #404]	; (8001648 <HAL_RCC_OscConfig+0x2ac>)
 80014b4:	689b      	ldr	r3, [r3, #8]
 80014b6:	f003 030c 	and.w	r3, r3, #12
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d00b      	beq.n	80014d6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80014be:	4b62      	ldr	r3, [pc, #392]	; (8001648 <HAL_RCC_OscConfig+0x2ac>)
 80014c0:	689b      	ldr	r3, [r3, #8]
 80014c2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80014c6:	2b08      	cmp	r3, #8
 80014c8:	d11c      	bne.n	8001504 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80014ca:	4b5f      	ldr	r3, [pc, #380]	; (8001648 <HAL_RCC_OscConfig+0x2ac>)
 80014cc:	685b      	ldr	r3, [r3, #4]
 80014ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d116      	bne.n	8001504 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014d6:	4b5c      	ldr	r3, [pc, #368]	; (8001648 <HAL_RCC_OscConfig+0x2ac>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f003 0302 	and.w	r3, r3, #2
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d005      	beq.n	80014ee <HAL_RCC_OscConfig+0x152>
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	68db      	ldr	r3, [r3, #12]
 80014e6:	2b01      	cmp	r3, #1
 80014e8:	d001      	beq.n	80014ee <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80014ea:	2301      	movs	r3, #1
 80014ec:	e1bb      	b.n	8001866 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014ee:	4b56      	ldr	r3, [pc, #344]	; (8001648 <HAL_RCC_OscConfig+0x2ac>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	691b      	ldr	r3, [r3, #16]
 80014fa:	00db      	lsls	r3, r3, #3
 80014fc:	4952      	ldr	r1, [pc, #328]	; (8001648 <HAL_RCC_OscConfig+0x2ac>)
 80014fe:	4313      	orrs	r3, r2
 8001500:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001502:	e03a      	b.n	800157a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	68db      	ldr	r3, [r3, #12]
 8001508:	2b00      	cmp	r3, #0
 800150a:	d020      	beq.n	800154e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800150c:	4b4f      	ldr	r3, [pc, #316]	; (800164c <HAL_RCC_OscConfig+0x2b0>)
 800150e:	2201      	movs	r2, #1
 8001510:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001512:	f7ff fc2b 	bl	8000d6c <HAL_GetTick>
 8001516:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001518:	e008      	b.n	800152c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800151a:	f7ff fc27 	bl	8000d6c <HAL_GetTick>
 800151e:	4602      	mov	r2, r0
 8001520:	693b      	ldr	r3, [r7, #16]
 8001522:	1ad3      	subs	r3, r2, r3
 8001524:	2b02      	cmp	r3, #2
 8001526:	d901      	bls.n	800152c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001528:	2303      	movs	r3, #3
 800152a:	e19c      	b.n	8001866 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800152c:	4b46      	ldr	r3, [pc, #280]	; (8001648 <HAL_RCC_OscConfig+0x2ac>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f003 0302 	and.w	r3, r3, #2
 8001534:	2b00      	cmp	r3, #0
 8001536:	d0f0      	beq.n	800151a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001538:	4b43      	ldr	r3, [pc, #268]	; (8001648 <HAL_RCC_OscConfig+0x2ac>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	691b      	ldr	r3, [r3, #16]
 8001544:	00db      	lsls	r3, r3, #3
 8001546:	4940      	ldr	r1, [pc, #256]	; (8001648 <HAL_RCC_OscConfig+0x2ac>)
 8001548:	4313      	orrs	r3, r2
 800154a:	600b      	str	r3, [r1, #0]
 800154c:	e015      	b.n	800157a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800154e:	4b3f      	ldr	r3, [pc, #252]	; (800164c <HAL_RCC_OscConfig+0x2b0>)
 8001550:	2200      	movs	r2, #0
 8001552:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001554:	f7ff fc0a 	bl	8000d6c <HAL_GetTick>
 8001558:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800155a:	e008      	b.n	800156e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800155c:	f7ff fc06 	bl	8000d6c <HAL_GetTick>
 8001560:	4602      	mov	r2, r0
 8001562:	693b      	ldr	r3, [r7, #16]
 8001564:	1ad3      	subs	r3, r2, r3
 8001566:	2b02      	cmp	r3, #2
 8001568:	d901      	bls.n	800156e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800156a:	2303      	movs	r3, #3
 800156c:	e17b      	b.n	8001866 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800156e:	4b36      	ldr	r3, [pc, #216]	; (8001648 <HAL_RCC_OscConfig+0x2ac>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f003 0302 	and.w	r3, r3, #2
 8001576:	2b00      	cmp	r3, #0
 8001578:	d1f0      	bne.n	800155c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f003 0308 	and.w	r3, r3, #8
 8001582:	2b00      	cmp	r3, #0
 8001584:	d030      	beq.n	80015e8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	695b      	ldr	r3, [r3, #20]
 800158a:	2b00      	cmp	r3, #0
 800158c:	d016      	beq.n	80015bc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800158e:	4b30      	ldr	r3, [pc, #192]	; (8001650 <HAL_RCC_OscConfig+0x2b4>)
 8001590:	2201      	movs	r2, #1
 8001592:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001594:	f7ff fbea 	bl	8000d6c <HAL_GetTick>
 8001598:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800159a:	e008      	b.n	80015ae <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800159c:	f7ff fbe6 	bl	8000d6c <HAL_GetTick>
 80015a0:	4602      	mov	r2, r0
 80015a2:	693b      	ldr	r3, [r7, #16]
 80015a4:	1ad3      	subs	r3, r2, r3
 80015a6:	2b02      	cmp	r3, #2
 80015a8:	d901      	bls.n	80015ae <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80015aa:	2303      	movs	r3, #3
 80015ac:	e15b      	b.n	8001866 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015ae:	4b26      	ldr	r3, [pc, #152]	; (8001648 <HAL_RCC_OscConfig+0x2ac>)
 80015b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80015b2:	f003 0302 	and.w	r3, r3, #2
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d0f0      	beq.n	800159c <HAL_RCC_OscConfig+0x200>
 80015ba:	e015      	b.n	80015e8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80015bc:	4b24      	ldr	r3, [pc, #144]	; (8001650 <HAL_RCC_OscConfig+0x2b4>)
 80015be:	2200      	movs	r2, #0
 80015c0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015c2:	f7ff fbd3 	bl	8000d6c <HAL_GetTick>
 80015c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015c8:	e008      	b.n	80015dc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80015ca:	f7ff fbcf 	bl	8000d6c <HAL_GetTick>
 80015ce:	4602      	mov	r2, r0
 80015d0:	693b      	ldr	r3, [r7, #16]
 80015d2:	1ad3      	subs	r3, r2, r3
 80015d4:	2b02      	cmp	r3, #2
 80015d6:	d901      	bls.n	80015dc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80015d8:	2303      	movs	r3, #3
 80015da:	e144      	b.n	8001866 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015dc:	4b1a      	ldr	r3, [pc, #104]	; (8001648 <HAL_RCC_OscConfig+0x2ac>)
 80015de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80015e0:	f003 0302 	and.w	r3, r3, #2
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d1f0      	bne.n	80015ca <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f003 0304 	and.w	r3, r3, #4
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	f000 80a0 	beq.w	8001736 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80015f6:	2300      	movs	r3, #0
 80015f8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80015fa:	4b13      	ldr	r3, [pc, #76]	; (8001648 <HAL_RCC_OscConfig+0x2ac>)
 80015fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001602:	2b00      	cmp	r3, #0
 8001604:	d10f      	bne.n	8001626 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001606:	2300      	movs	r3, #0
 8001608:	60bb      	str	r3, [r7, #8]
 800160a:	4b0f      	ldr	r3, [pc, #60]	; (8001648 <HAL_RCC_OscConfig+0x2ac>)
 800160c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800160e:	4a0e      	ldr	r2, [pc, #56]	; (8001648 <HAL_RCC_OscConfig+0x2ac>)
 8001610:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001614:	6413      	str	r3, [r2, #64]	; 0x40
 8001616:	4b0c      	ldr	r3, [pc, #48]	; (8001648 <HAL_RCC_OscConfig+0x2ac>)
 8001618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800161a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800161e:	60bb      	str	r3, [r7, #8]
 8001620:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001622:	2301      	movs	r3, #1
 8001624:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001626:	4b0b      	ldr	r3, [pc, #44]	; (8001654 <HAL_RCC_OscConfig+0x2b8>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800162e:	2b00      	cmp	r3, #0
 8001630:	d121      	bne.n	8001676 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001632:	4b08      	ldr	r3, [pc, #32]	; (8001654 <HAL_RCC_OscConfig+0x2b8>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	4a07      	ldr	r2, [pc, #28]	; (8001654 <HAL_RCC_OscConfig+0x2b8>)
 8001638:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800163c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800163e:	f7ff fb95 	bl	8000d6c <HAL_GetTick>
 8001642:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001644:	e011      	b.n	800166a <HAL_RCC_OscConfig+0x2ce>
 8001646:	bf00      	nop
 8001648:	40023800 	.word	0x40023800
 800164c:	42470000 	.word	0x42470000
 8001650:	42470e80 	.word	0x42470e80
 8001654:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001658:	f7ff fb88 	bl	8000d6c <HAL_GetTick>
 800165c:	4602      	mov	r2, r0
 800165e:	693b      	ldr	r3, [r7, #16]
 8001660:	1ad3      	subs	r3, r2, r3
 8001662:	2b02      	cmp	r3, #2
 8001664:	d901      	bls.n	800166a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001666:	2303      	movs	r3, #3
 8001668:	e0fd      	b.n	8001866 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800166a:	4b81      	ldr	r3, [pc, #516]	; (8001870 <HAL_RCC_OscConfig+0x4d4>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001672:	2b00      	cmp	r3, #0
 8001674:	d0f0      	beq.n	8001658 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	689b      	ldr	r3, [r3, #8]
 800167a:	2b01      	cmp	r3, #1
 800167c:	d106      	bne.n	800168c <HAL_RCC_OscConfig+0x2f0>
 800167e:	4b7d      	ldr	r3, [pc, #500]	; (8001874 <HAL_RCC_OscConfig+0x4d8>)
 8001680:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001682:	4a7c      	ldr	r2, [pc, #496]	; (8001874 <HAL_RCC_OscConfig+0x4d8>)
 8001684:	f043 0301 	orr.w	r3, r3, #1
 8001688:	6713      	str	r3, [r2, #112]	; 0x70
 800168a:	e01c      	b.n	80016c6 <HAL_RCC_OscConfig+0x32a>
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	689b      	ldr	r3, [r3, #8]
 8001690:	2b05      	cmp	r3, #5
 8001692:	d10c      	bne.n	80016ae <HAL_RCC_OscConfig+0x312>
 8001694:	4b77      	ldr	r3, [pc, #476]	; (8001874 <HAL_RCC_OscConfig+0x4d8>)
 8001696:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001698:	4a76      	ldr	r2, [pc, #472]	; (8001874 <HAL_RCC_OscConfig+0x4d8>)
 800169a:	f043 0304 	orr.w	r3, r3, #4
 800169e:	6713      	str	r3, [r2, #112]	; 0x70
 80016a0:	4b74      	ldr	r3, [pc, #464]	; (8001874 <HAL_RCC_OscConfig+0x4d8>)
 80016a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016a4:	4a73      	ldr	r2, [pc, #460]	; (8001874 <HAL_RCC_OscConfig+0x4d8>)
 80016a6:	f043 0301 	orr.w	r3, r3, #1
 80016aa:	6713      	str	r3, [r2, #112]	; 0x70
 80016ac:	e00b      	b.n	80016c6 <HAL_RCC_OscConfig+0x32a>
 80016ae:	4b71      	ldr	r3, [pc, #452]	; (8001874 <HAL_RCC_OscConfig+0x4d8>)
 80016b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016b2:	4a70      	ldr	r2, [pc, #448]	; (8001874 <HAL_RCC_OscConfig+0x4d8>)
 80016b4:	f023 0301 	bic.w	r3, r3, #1
 80016b8:	6713      	str	r3, [r2, #112]	; 0x70
 80016ba:	4b6e      	ldr	r3, [pc, #440]	; (8001874 <HAL_RCC_OscConfig+0x4d8>)
 80016bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016be:	4a6d      	ldr	r2, [pc, #436]	; (8001874 <HAL_RCC_OscConfig+0x4d8>)
 80016c0:	f023 0304 	bic.w	r3, r3, #4
 80016c4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	689b      	ldr	r3, [r3, #8]
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d015      	beq.n	80016fa <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016ce:	f7ff fb4d 	bl	8000d6c <HAL_GetTick>
 80016d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016d4:	e00a      	b.n	80016ec <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80016d6:	f7ff fb49 	bl	8000d6c <HAL_GetTick>
 80016da:	4602      	mov	r2, r0
 80016dc:	693b      	ldr	r3, [r7, #16]
 80016de:	1ad3      	subs	r3, r2, r3
 80016e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80016e4:	4293      	cmp	r3, r2
 80016e6:	d901      	bls.n	80016ec <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80016e8:	2303      	movs	r3, #3
 80016ea:	e0bc      	b.n	8001866 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016ec:	4b61      	ldr	r3, [pc, #388]	; (8001874 <HAL_RCC_OscConfig+0x4d8>)
 80016ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016f0:	f003 0302 	and.w	r3, r3, #2
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d0ee      	beq.n	80016d6 <HAL_RCC_OscConfig+0x33a>
 80016f8:	e014      	b.n	8001724 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016fa:	f7ff fb37 	bl	8000d6c <HAL_GetTick>
 80016fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001700:	e00a      	b.n	8001718 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001702:	f7ff fb33 	bl	8000d6c <HAL_GetTick>
 8001706:	4602      	mov	r2, r0
 8001708:	693b      	ldr	r3, [r7, #16]
 800170a:	1ad3      	subs	r3, r2, r3
 800170c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001710:	4293      	cmp	r3, r2
 8001712:	d901      	bls.n	8001718 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001714:	2303      	movs	r3, #3
 8001716:	e0a6      	b.n	8001866 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001718:	4b56      	ldr	r3, [pc, #344]	; (8001874 <HAL_RCC_OscConfig+0x4d8>)
 800171a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800171c:	f003 0302 	and.w	r3, r3, #2
 8001720:	2b00      	cmp	r3, #0
 8001722:	d1ee      	bne.n	8001702 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001724:	7dfb      	ldrb	r3, [r7, #23]
 8001726:	2b01      	cmp	r3, #1
 8001728:	d105      	bne.n	8001736 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800172a:	4b52      	ldr	r3, [pc, #328]	; (8001874 <HAL_RCC_OscConfig+0x4d8>)
 800172c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800172e:	4a51      	ldr	r2, [pc, #324]	; (8001874 <HAL_RCC_OscConfig+0x4d8>)
 8001730:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001734:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	699b      	ldr	r3, [r3, #24]
 800173a:	2b00      	cmp	r3, #0
 800173c:	f000 8092 	beq.w	8001864 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001740:	4b4c      	ldr	r3, [pc, #304]	; (8001874 <HAL_RCC_OscConfig+0x4d8>)
 8001742:	689b      	ldr	r3, [r3, #8]
 8001744:	f003 030c 	and.w	r3, r3, #12
 8001748:	2b08      	cmp	r3, #8
 800174a:	d05c      	beq.n	8001806 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	699b      	ldr	r3, [r3, #24]
 8001750:	2b02      	cmp	r3, #2
 8001752:	d141      	bne.n	80017d8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001754:	4b48      	ldr	r3, [pc, #288]	; (8001878 <HAL_RCC_OscConfig+0x4dc>)
 8001756:	2200      	movs	r2, #0
 8001758:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800175a:	f7ff fb07 	bl	8000d6c <HAL_GetTick>
 800175e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001760:	e008      	b.n	8001774 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001762:	f7ff fb03 	bl	8000d6c <HAL_GetTick>
 8001766:	4602      	mov	r2, r0
 8001768:	693b      	ldr	r3, [r7, #16]
 800176a:	1ad3      	subs	r3, r2, r3
 800176c:	2b02      	cmp	r3, #2
 800176e:	d901      	bls.n	8001774 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001770:	2303      	movs	r3, #3
 8001772:	e078      	b.n	8001866 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001774:	4b3f      	ldr	r3, [pc, #252]	; (8001874 <HAL_RCC_OscConfig+0x4d8>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800177c:	2b00      	cmp	r3, #0
 800177e:	d1f0      	bne.n	8001762 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	69da      	ldr	r2, [r3, #28]
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	6a1b      	ldr	r3, [r3, #32]
 8001788:	431a      	orrs	r2, r3
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800178e:	019b      	lsls	r3, r3, #6
 8001790:	431a      	orrs	r2, r3
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001796:	085b      	lsrs	r3, r3, #1
 8001798:	3b01      	subs	r3, #1
 800179a:	041b      	lsls	r3, r3, #16
 800179c:	431a      	orrs	r2, r3
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017a2:	061b      	lsls	r3, r3, #24
 80017a4:	4933      	ldr	r1, [pc, #204]	; (8001874 <HAL_RCC_OscConfig+0x4d8>)
 80017a6:	4313      	orrs	r3, r2
 80017a8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80017aa:	4b33      	ldr	r3, [pc, #204]	; (8001878 <HAL_RCC_OscConfig+0x4dc>)
 80017ac:	2201      	movs	r2, #1
 80017ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017b0:	f7ff fadc 	bl	8000d6c <HAL_GetTick>
 80017b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017b6:	e008      	b.n	80017ca <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017b8:	f7ff fad8 	bl	8000d6c <HAL_GetTick>
 80017bc:	4602      	mov	r2, r0
 80017be:	693b      	ldr	r3, [r7, #16]
 80017c0:	1ad3      	subs	r3, r2, r3
 80017c2:	2b02      	cmp	r3, #2
 80017c4:	d901      	bls.n	80017ca <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80017c6:	2303      	movs	r3, #3
 80017c8:	e04d      	b.n	8001866 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017ca:	4b2a      	ldr	r3, [pc, #168]	; (8001874 <HAL_RCC_OscConfig+0x4d8>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d0f0      	beq.n	80017b8 <HAL_RCC_OscConfig+0x41c>
 80017d6:	e045      	b.n	8001864 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017d8:	4b27      	ldr	r3, [pc, #156]	; (8001878 <HAL_RCC_OscConfig+0x4dc>)
 80017da:	2200      	movs	r2, #0
 80017dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017de:	f7ff fac5 	bl	8000d6c <HAL_GetTick>
 80017e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017e4:	e008      	b.n	80017f8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017e6:	f7ff fac1 	bl	8000d6c <HAL_GetTick>
 80017ea:	4602      	mov	r2, r0
 80017ec:	693b      	ldr	r3, [r7, #16]
 80017ee:	1ad3      	subs	r3, r2, r3
 80017f0:	2b02      	cmp	r3, #2
 80017f2:	d901      	bls.n	80017f8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80017f4:	2303      	movs	r3, #3
 80017f6:	e036      	b.n	8001866 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017f8:	4b1e      	ldr	r3, [pc, #120]	; (8001874 <HAL_RCC_OscConfig+0x4d8>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001800:	2b00      	cmp	r3, #0
 8001802:	d1f0      	bne.n	80017e6 <HAL_RCC_OscConfig+0x44a>
 8001804:	e02e      	b.n	8001864 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	699b      	ldr	r3, [r3, #24]
 800180a:	2b01      	cmp	r3, #1
 800180c:	d101      	bne.n	8001812 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800180e:	2301      	movs	r3, #1
 8001810:	e029      	b.n	8001866 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001812:	4b18      	ldr	r3, [pc, #96]	; (8001874 <HAL_RCC_OscConfig+0x4d8>)
 8001814:	685b      	ldr	r3, [r3, #4]
 8001816:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	69db      	ldr	r3, [r3, #28]
 8001822:	429a      	cmp	r2, r3
 8001824:	d11c      	bne.n	8001860 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001830:	429a      	cmp	r2, r3
 8001832:	d115      	bne.n	8001860 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001834:	68fa      	ldr	r2, [r7, #12]
 8001836:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800183a:	4013      	ands	r3, r2
 800183c:	687a      	ldr	r2, [r7, #4]
 800183e:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001840:	4293      	cmp	r3, r2
 8001842:	d10d      	bne.n	8001860 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800184e:	429a      	cmp	r2, r3
 8001850:	d106      	bne.n	8001860 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800185c:	429a      	cmp	r2, r3
 800185e:	d001      	beq.n	8001864 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8001860:	2301      	movs	r3, #1
 8001862:	e000      	b.n	8001866 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8001864:	2300      	movs	r3, #0
}
 8001866:	4618      	mov	r0, r3
 8001868:	3718      	adds	r7, #24
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}
 800186e:	bf00      	nop
 8001870:	40007000 	.word	0x40007000
 8001874:	40023800 	.word	0x40023800
 8001878:	42470060 	.word	0x42470060

0800187c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b084      	sub	sp, #16
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
 8001884:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	2b00      	cmp	r3, #0
 800188a:	d101      	bne.n	8001890 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800188c:	2301      	movs	r3, #1
 800188e:	e0cc      	b.n	8001a2a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001890:	4b68      	ldr	r3, [pc, #416]	; (8001a34 <HAL_RCC_ClockConfig+0x1b8>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f003 030f 	and.w	r3, r3, #15
 8001898:	683a      	ldr	r2, [r7, #0]
 800189a:	429a      	cmp	r2, r3
 800189c:	d90c      	bls.n	80018b8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800189e:	4b65      	ldr	r3, [pc, #404]	; (8001a34 <HAL_RCC_ClockConfig+0x1b8>)
 80018a0:	683a      	ldr	r2, [r7, #0]
 80018a2:	b2d2      	uxtb	r2, r2
 80018a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80018a6:	4b63      	ldr	r3, [pc, #396]	; (8001a34 <HAL_RCC_ClockConfig+0x1b8>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f003 030f 	and.w	r3, r3, #15
 80018ae:	683a      	ldr	r2, [r7, #0]
 80018b0:	429a      	cmp	r2, r3
 80018b2:	d001      	beq.n	80018b8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80018b4:	2301      	movs	r3, #1
 80018b6:	e0b8      	b.n	8001a2a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f003 0302 	and.w	r3, r3, #2
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d020      	beq.n	8001906 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f003 0304 	and.w	r3, r3, #4
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d005      	beq.n	80018dc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80018d0:	4b59      	ldr	r3, [pc, #356]	; (8001a38 <HAL_RCC_ClockConfig+0x1bc>)
 80018d2:	689b      	ldr	r3, [r3, #8]
 80018d4:	4a58      	ldr	r2, [pc, #352]	; (8001a38 <HAL_RCC_ClockConfig+0x1bc>)
 80018d6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80018da:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f003 0308 	and.w	r3, r3, #8
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d005      	beq.n	80018f4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80018e8:	4b53      	ldr	r3, [pc, #332]	; (8001a38 <HAL_RCC_ClockConfig+0x1bc>)
 80018ea:	689b      	ldr	r3, [r3, #8]
 80018ec:	4a52      	ldr	r2, [pc, #328]	; (8001a38 <HAL_RCC_ClockConfig+0x1bc>)
 80018ee:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80018f2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80018f4:	4b50      	ldr	r3, [pc, #320]	; (8001a38 <HAL_RCC_ClockConfig+0x1bc>)
 80018f6:	689b      	ldr	r3, [r3, #8]
 80018f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	689b      	ldr	r3, [r3, #8]
 8001900:	494d      	ldr	r1, [pc, #308]	; (8001a38 <HAL_RCC_ClockConfig+0x1bc>)
 8001902:	4313      	orrs	r3, r2
 8001904:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f003 0301 	and.w	r3, r3, #1
 800190e:	2b00      	cmp	r3, #0
 8001910:	d044      	beq.n	800199c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	685b      	ldr	r3, [r3, #4]
 8001916:	2b01      	cmp	r3, #1
 8001918:	d107      	bne.n	800192a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800191a:	4b47      	ldr	r3, [pc, #284]	; (8001a38 <HAL_RCC_ClockConfig+0x1bc>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001922:	2b00      	cmp	r3, #0
 8001924:	d119      	bne.n	800195a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001926:	2301      	movs	r3, #1
 8001928:	e07f      	b.n	8001a2a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	685b      	ldr	r3, [r3, #4]
 800192e:	2b02      	cmp	r3, #2
 8001930:	d003      	beq.n	800193a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001936:	2b03      	cmp	r3, #3
 8001938:	d107      	bne.n	800194a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800193a:	4b3f      	ldr	r3, [pc, #252]	; (8001a38 <HAL_RCC_ClockConfig+0x1bc>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001942:	2b00      	cmp	r3, #0
 8001944:	d109      	bne.n	800195a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001946:	2301      	movs	r3, #1
 8001948:	e06f      	b.n	8001a2a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800194a:	4b3b      	ldr	r3, [pc, #236]	; (8001a38 <HAL_RCC_ClockConfig+0x1bc>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f003 0302 	and.w	r3, r3, #2
 8001952:	2b00      	cmp	r3, #0
 8001954:	d101      	bne.n	800195a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001956:	2301      	movs	r3, #1
 8001958:	e067      	b.n	8001a2a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800195a:	4b37      	ldr	r3, [pc, #220]	; (8001a38 <HAL_RCC_ClockConfig+0x1bc>)
 800195c:	689b      	ldr	r3, [r3, #8]
 800195e:	f023 0203 	bic.w	r2, r3, #3
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	685b      	ldr	r3, [r3, #4]
 8001966:	4934      	ldr	r1, [pc, #208]	; (8001a38 <HAL_RCC_ClockConfig+0x1bc>)
 8001968:	4313      	orrs	r3, r2
 800196a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800196c:	f7ff f9fe 	bl	8000d6c <HAL_GetTick>
 8001970:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001972:	e00a      	b.n	800198a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001974:	f7ff f9fa 	bl	8000d6c <HAL_GetTick>
 8001978:	4602      	mov	r2, r0
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	1ad3      	subs	r3, r2, r3
 800197e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001982:	4293      	cmp	r3, r2
 8001984:	d901      	bls.n	800198a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001986:	2303      	movs	r3, #3
 8001988:	e04f      	b.n	8001a2a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800198a:	4b2b      	ldr	r3, [pc, #172]	; (8001a38 <HAL_RCC_ClockConfig+0x1bc>)
 800198c:	689b      	ldr	r3, [r3, #8]
 800198e:	f003 020c 	and.w	r2, r3, #12
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	685b      	ldr	r3, [r3, #4]
 8001996:	009b      	lsls	r3, r3, #2
 8001998:	429a      	cmp	r2, r3
 800199a:	d1eb      	bne.n	8001974 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800199c:	4b25      	ldr	r3, [pc, #148]	; (8001a34 <HAL_RCC_ClockConfig+0x1b8>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f003 030f 	and.w	r3, r3, #15
 80019a4:	683a      	ldr	r2, [r7, #0]
 80019a6:	429a      	cmp	r2, r3
 80019a8:	d20c      	bcs.n	80019c4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019aa:	4b22      	ldr	r3, [pc, #136]	; (8001a34 <HAL_RCC_ClockConfig+0x1b8>)
 80019ac:	683a      	ldr	r2, [r7, #0]
 80019ae:	b2d2      	uxtb	r2, r2
 80019b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80019b2:	4b20      	ldr	r3, [pc, #128]	; (8001a34 <HAL_RCC_ClockConfig+0x1b8>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f003 030f 	and.w	r3, r3, #15
 80019ba:	683a      	ldr	r2, [r7, #0]
 80019bc:	429a      	cmp	r2, r3
 80019be:	d001      	beq.n	80019c4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80019c0:	2301      	movs	r3, #1
 80019c2:	e032      	b.n	8001a2a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f003 0304 	and.w	r3, r3, #4
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d008      	beq.n	80019e2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80019d0:	4b19      	ldr	r3, [pc, #100]	; (8001a38 <HAL_RCC_ClockConfig+0x1bc>)
 80019d2:	689b      	ldr	r3, [r3, #8]
 80019d4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	68db      	ldr	r3, [r3, #12]
 80019dc:	4916      	ldr	r1, [pc, #88]	; (8001a38 <HAL_RCC_ClockConfig+0x1bc>)
 80019de:	4313      	orrs	r3, r2
 80019e0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f003 0308 	and.w	r3, r3, #8
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d009      	beq.n	8001a02 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80019ee:	4b12      	ldr	r3, [pc, #72]	; (8001a38 <HAL_RCC_ClockConfig+0x1bc>)
 80019f0:	689b      	ldr	r3, [r3, #8]
 80019f2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	691b      	ldr	r3, [r3, #16]
 80019fa:	00db      	lsls	r3, r3, #3
 80019fc:	490e      	ldr	r1, [pc, #56]	; (8001a38 <HAL_RCC_ClockConfig+0x1bc>)
 80019fe:	4313      	orrs	r3, r2
 8001a00:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001a02:	f000 f821 	bl	8001a48 <HAL_RCC_GetSysClockFreq>
 8001a06:	4601      	mov	r1, r0
 8001a08:	4b0b      	ldr	r3, [pc, #44]	; (8001a38 <HAL_RCC_ClockConfig+0x1bc>)
 8001a0a:	689b      	ldr	r3, [r3, #8]
 8001a0c:	091b      	lsrs	r3, r3, #4
 8001a0e:	f003 030f 	and.w	r3, r3, #15
 8001a12:	4a0a      	ldr	r2, [pc, #40]	; (8001a3c <HAL_RCC_ClockConfig+0x1c0>)
 8001a14:	5cd3      	ldrb	r3, [r2, r3]
 8001a16:	fa21 f303 	lsr.w	r3, r1, r3
 8001a1a:	4a09      	ldr	r2, [pc, #36]	; (8001a40 <HAL_RCC_ClockConfig+0x1c4>)
 8001a1c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001a1e:	4b09      	ldr	r3, [pc, #36]	; (8001a44 <HAL_RCC_ClockConfig+0x1c8>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	4618      	mov	r0, r3
 8001a24:	f7ff f95e 	bl	8000ce4 <HAL_InitTick>

  return HAL_OK;
 8001a28:	2300      	movs	r3, #0
}
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	3710      	adds	r7, #16
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}
 8001a32:	bf00      	nop
 8001a34:	40023c00 	.word	0x40023c00
 8001a38:	40023800 	.word	0x40023800
 8001a3c:	08002dc0 	.word	0x08002dc0
 8001a40:	20000020 	.word	0x20000020
 8001a44:	20000024 	.word	0x20000024

08001a48 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a4a:	b085      	sub	sp, #20
 8001a4c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	607b      	str	r3, [r7, #4]
 8001a52:	2300      	movs	r3, #0
 8001a54:	60fb      	str	r3, [r7, #12]
 8001a56:	2300      	movs	r3, #0
 8001a58:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001a5e:	4b63      	ldr	r3, [pc, #396]	; (8001bec <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001a60:	689b      	ldr	r3, [r3, #8]
 8001a62:	f003 030c 	and.w	r3, r3, #12
 8001a66:	2b04      	cmp	r3, #4
 8001a68:	d007      	beq.n	8001a7a <HAL_RCC_GetSysClockFreq+0x32>
 8001a6a:	2b08      	cmp	r3, #8
 8001a6c:	d008      	beq.n	8001a80 <HAL_RCC_GetSysClockFreq+0x38>
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	f040 80b4 	bne.w	8001bdc <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001a74:	4b5e      	ldr	r3, [pc, #376]	; (8001bf0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001a76:	60bb      	str	r3, [r7, #8]
       break;
 8001a78:	e0b3      	b.n	8001be2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001a7a:	4b5e      	ldr	r3, [pc, #376]	; (8001bf4 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8001a7c:	60bb      	str	r3, [r7, #8]
      break;
 8001a7e:	e0b0      	b.n	8001be2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001a80:	4b5a      	ldr	r3, [pc, #360]	; (8001bec <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001a82:	685b      	ldr	r3, [r3, #4]
 8001a84:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001a88:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001a8a:	4b58      	ldr	r3, [pc, #352]	; (8001bec <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001a8c:	685b      	ldr	r3, [r3, #4]
 8001a8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d04a      	beq.n	8001b2c <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a96:	4b55      	ldr	r3, [pc, #340]	; (8001bec <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001a98:	685b      	ldr	r3, [r3, #4]
 8001a9a:	099b      	lsrs	r3, r3, #6
 8001a9c:	f04f 0400 	mov.w	r4, #0
 8001aa0:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001aa4:	f04f 0200 	mov.w	r2, #0
 8001aa8:	ea03 0501 	and.w	r5, r3, r1
 8001aac:	ea04 0602 	and.w	r6, r4, r2
 8001ab0:	4629      	mov	r1, r5
 8001ab2:	4632      	mov	r2, r6
 8001ab4:	f04f 0300 	mov.w	r3, #0
 8001ab8:	f04f 0400 	mov.w	r4, #0
 8001abc:	0154      	lsls	r4, r2, #5
 8001abe:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001ac2:	014b      	lsls	r3, r1, #5
 8001ac4:	4619      	mov	r1, r3
 8001ac6:	4622      	mov	r2, r4
 8001ac8:	1b49      	subs	r1, r1, r5
 8001aca:	eb62 0206 	sbc.w	r2, r2, r6
 8001ace:	f04f 0300 	mov.w	r3, #0
 8001ad2:	f04f 0400 	mov.w	r4, #0
 8001ad6:	0194      	lsls	r4, r2, #6
 8001ad8:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001adc:	018b      	lsls	r3, r1, #6
 8001ade:	1a5b      	subs	r3, r3, r1
 8001ae0:	eb64 0402 	sbc.w	r4, r4, r2
 8001ae4:	f04f 0100 	mov.w	r1, #0
 8001ae8:	f04f 0200 	mov.w	r2, #0
 8001aec:	00e2      	lsls	r2, r4, #3
 8001aee:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001af2:	00d9      	lsls	r1, r3, #3
 8001af4:	460b      	mov	r3, r1
 8001af6:	4614      	mov	r4, r2
 8001af8:	195b      	adds	r3, r3, r5
 8001afa:	eb44 0406 	adc.w	r4, r4, r6
 8001afe:	f04f 0100 	mov.w	r1, #0
 8001b02:	f04f 0200 	mov.w	r2, #0
 8001b06:	0262      	lsls	r2, r4, #9
 8001b08:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8001b0c:	0259      	lsls	r1, r3, #9
 8001b0e:	460b      	mov	r3, r1
 8001b10:	4614      	mov	r4, r2
 8001b12:	4618      	mov	r0, r3
 8001b14:	4621      	mov	r1, r4
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	f04f 0400 	mov.w	r4, #0
 8001b1c:	461a      	mov	r2, r3
 8001b1e:	4623      	mov	r3, r4
 8001b20:	f7fe fb5a 	bl	80001d8 <__aeabi_uldivmod>
 8001b24:	4603      	mov	r3, r0
 8001b26:	460c      	mov	r4, r1
 8001b28:	60fb      	str	r3, [r7, #12]
 8001b2a:	e049      	b.n	8001bc0 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b2c:	4b2f      	ldr	r3, [pc, #188]	; (8001bec <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001b2e:	685b      	ldr	r3, [r3, #4]
 8001b30:	099b      	lsrs	r3, r3, #6
 8001b32:	f04f 0400 	mov.w	r4, #0
 8001b36:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001b3a:	f04f 0200 	mov.w	r2, #0
 8001b3e:	ea03 0501 	and.w	r5, r3, r1
 8001b42:	ea04 0602 	and.w	r6, r4, r2
 8001b46:	4629      	mov	r1, r5
 8001b48:	4632      	mov	r2, r6
 8001b4a:	f04f 0300 	mov.w	r3, #0
 8001b4e:	f04f 0400 	mov.w	r4, #0
 8001b52:	0154      	lsls	r4, r2, #5
 8001b54:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001b58:	014b      	lsls	r3, r1, #5
 8001b5a:	4619      	mov	r1, r3
 8001b5c:	4622      	mov	r2, r4
 8001b5e:	1b49      	subs	r1, r1, r5
 8001b60:	eb62 0206 	sbc.w	r2, r2, r6
 8001b64:	f04f 0300 	mov.w	r3, #0
 8001b68:	f04f 0400 	mov.w	r4, #0
 8001b6c:	0194      	lsls	r4, r2, #6
 8001b6e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001b72:	018b      	lsls	r3, r1, #6
 8001b74:	1a5b      	subs	r3, r3, r1
 8001b76:	eb64 0402 	sbc.w	r4, r4, r2
 8001b7a:	f04f 0100 	mov.w	r1, #0
 8001b7e:	f04f 0200 	mov.w	r2, #0
 8001b82:	00e2      	lsls	r2, r4, #3
 8001b84:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001b88:	00d9      	lsls	r1, r3, #3
 8001b8a:	460b      	mov	r3, r1
 8001b8c:	4614      	mov	r4, r2
 8001b8e:	195b      	adds	r3, r3, r5
 8001b90:	eb44 0406 	adc.w	r4, r4, r6
 8001b94:	f04f 0100 	mov.w	r1, #0
 8001b98:	f04f 0200 	mov.w	r2, #0
 8001b9c:	02a2      	lsls	r2, r4, #10
 8001b9e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001ba2:	0299      	lsls	r1, r3, #10
 8001ba4:	460b      	mov	r3, r1
 8001ba6:	4614      	mov	r4, r2
 8001ba8:	4618      	mov	r0, r3
 8001baa:	4621      	mov	r1, r4
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	f04f 0400 	mov.w	r4, #0
 8001bb2:	461a      	mov	r2, r3
 8001bb4:	4623      	mov	r3, r4
 8001bb6:	f7fe fb0f 	bl	80001d8 <__aeabi_uldivmod>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	460c      	mov	r4, r1
 8001bbe:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001bc0:	4b0a      	ldr	r3, [pc, #40]	; (8001bec <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001bc2:	685b      	ldr	r3, [r3, #4]
 8001bc4:	0c1b      	lsrs	r3, r3, #16
 8001bc6:	f003 0303 	and.w	r3, r3, #3
 8001bca:	3301      	adds	r3, #1
 8001bcc:	005b      	lsls	r3, r3, #1
 8001bce:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001bd0:	68fa      	ldr	r2, [r7, #12]
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bd8:	60bb      	str	r3, [r7, #8]
      break;
 8001bda:	e002      	b.n	8001be2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001bdc:	4b04      	ldr	r3, [pc, #16]	; (8001bf0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001bde:	60bb      	str	r3, [r7, #8]
      break;
 8001be0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001be2:	68bb      	ldr	r3, [r7, #8]
}
 8001be4:	4618      	mov	r0, r3
 8001be6:	3714      	adds	r7, #20
 8001be8:	46bd      	mov	sp, r7
 8001bea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001bec:	40023800 	.word	0x40023800
 8001bf0:	00f42400 	.word	0x00f42400
 8001bf4:	007a1200 	.word	0x007a1200

08001bf8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001bfc:	4b03      	ldr	r3, [pc, #12]	; (8001c0c <HAL_RCC_GetHCLKFreq+0x14>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
}
 8001c00:	4618      	mov	r0, r3
 8001c02:	46bd      	mov	sp, r7
 8001c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c08:	4770      	bx	lr
 8001c0a:	bf00      	nop
 8001c0c:	20000020 	.word	0x20000020

08001c10 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001c14:	f7ff fff0 	bl	8001bf8 <HAL_RCC_GetHCLKFreq>
 8001c18:	4601      	mov	r1, r0
 8001c1a:	4b05      	ldr	r3, [pc, #20]	; (8001c30 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001c1c:	689b      	ldr	r3, [r3, #8]
 8001c1e:	0a9b      	lsrs	r3, r3, #10
 8001c20:	f003 0307 	and.w	r3, r3, #7
 8001c24:	4a03      	ldr	r2, [pc, #12]	; (8001c34 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c26:	5cd3      	ldrb	r3, [r2, r3]
 8001c28:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	bd80      	pop	{r7, pc}
 8001c30:	40023800 	.word	0x40023800
 8001c34:	08002dd0 	.word	0x08002dd0

08001c38 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001c3c:	f7ff ffdc 	bl	8001bf8 <HAL_RCC_GetHCLKFreq>
 8001c40:	4601      	mov	r1, r0
 8001c42:	4b05      	ldr	r3, [pc, #20]	; (8001c58 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001c44:	689b      	ldr	r3, [r3, #8]
 8001c46:	0b5b      	lsrs	r3, r3, #13
 8001c48:	f003 0307 	and.w	r3, r3, #7
 8001c4c:	4a03      	ldr	r2, [pc, #12]	; (8001c5c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001c4e:	5cd3      	ldrb	r3, [r2, r3]
 8001c50:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001c54:	4618      	mov	r0, r3
 8001c56:	bd80      	pop	{r7, pc}
 8001c58:	40023800 	.word	0x40023800
 8001c5c:	08002dd0 	.word	0x08002dd0

08001c60 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b082      	sub	sp, #8
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d101      	bne.n	8001c72 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001c6e:	2301      	movs	r3, #1
 8001c70:	e01d      	b.n	8001cae <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c78:	b2db      	uxtb	r3, r3
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d106      	bne.n	8001c8c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	2200      	movs	r2, #0
 8001c82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001c86:	6878      	ldr	r0, [r7, #4]
 8001c88:	f7fe fdf2 	bl	8000870 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	2202      	movs	r2, #2
 8001c90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681a      	ldr	r2, [r3, #0]
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	3304      	adds	r3, #4
 8001c9c:	4619      	mov	r1, r3
 8001c9e:	4610      	mov	r0, r2
 8001ca0:	f000 f9fa 	bl	8002098 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	2201      	movs	r2, #1
 8001ca8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001cac:	2300      	movs	r3, #0
}
 8001cae:	4618      	mov	r0, r3
 8001cb0:	3708      	adds	r7, #8
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd80      	pop	{r7, pc}

08001cb6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001cb6:	b580      	push	{r7, lr}
 8001cb8:	b082      	sub	sp, #8
 8001cba:	af00      	add	r7, sp, #0
 8001cbc:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	691b      	ldr	r3, [r3, #16]
 8001cc4:	f003 0302 	and.w	r3, r3, #2
 8001cc8:	2b02      	cmp	r3, #2
 8001cca:	d122      	bne.n	8001d12 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	68db      	ldr	r3, [r3, #12]
 8001cd2:	f003 0302 	and.w	r3, r3, #2
 8001cd6:	2b02      	cmp	r3, #2
 8001cd8:	d11b      	bne.n	8001d12 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f06f 0202 	mvn.w	r2, #2
 8001ce2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	2201      	movs	r2, #1
 8001ce8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	699b      	ldr	r3, [r3, #24]
 8001cf0:	f003 0303 	and.w	r3, r3, #3
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d003      	beq.n	8001d00 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001cf8:	6878      	ldr	r0, [r7, #4]
 8001cfa:	f000 f9af 	bl	800205c <HAL_TIM_IC_CaptureCallback>
 8001cfe:	e005      	b.n	8001d0c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d00:	6878      	ldr	r0, [r7, #4]
 8001d02:	f000 f9a1 	bl	8002048 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d06:	6878      	ldr	r0, [r7, #4]
 8001d08:	f000 f9b2 	bl	8002070 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	2200      	movs	r2, #0
 8001d10:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	691b      	ldr	r3, [r3, #16]
 8001d18:	f003 0304 	and.w	r3, r3, #4
 8001d1c:	2b04      	cmp	r3, #4
 8001d1e:	d122      	bne.n	8001d66 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	68db      	ldr	r3, [r3, #12]
 8001d26:	f003 0304 	and.w	r3, r3, #4
 8001d2a:	2b04      	cmp	r3, #4
 8001d2c:	d11b      	bne.n	8001d66 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f06f 0204 	mvn.w	r2, #4
 8001d36:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	2202      	movs	r2, #2
 8001d3c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	699b      	ldr	r3, [r3, #24]
 8001d44:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d003      	beq.n	8001d54 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d4c:	6878      	ldr	r0, [r7, #4]
 8001d4e:	f000 f985 	bl	800205c <HAL_TIM_IC_CaptureCallback>
 8001d52:	e005      	b.n	8001d60 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d54:	6878      	ldr	r0, [r7, #4]
 8001d56:	f000 f977 	bl	8002048 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d5a:	6878      	ldr	r0, [r7, #4]
 8001d5c:	f000 f988 	bl	8002070 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	2200      	movs	r2, #0
 8001d64:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	691b      	ldr	r3, [r3, #16]
 8001d6c:	f003 0308 	and.w	r3, r3, #8
 8001d70:	2b08      	cmp	r3, #8
 8001d72:	d122      	bne.n	8001dba <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	68db      	ldr	r3, [r3, #12]
 8001d7a:	f003 0308 	and.w	r3, r3, #8
 8001d7e:	2b08      	cmp	r3, #8
 8001d80:	d11b      	bne.n	8001dba <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f06f 0208 	mvn.w	r2, #8
 8001d8a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2204      	movs	r2, #4
 8001d90:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	69db      	ldr	r3, [r3, #28]
 8001d98:	f003 0303 	and.w	r3, r3, #3
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d003      	beq.n	8001da8 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001da0:	6878      	ldr	r0, [r7, #4]
 8001da2:	f000 f95b 	bl	800205c <HAL_TIM_IC_CaptureCallback>
 8001da6:	e005      	b.n	8001db4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001da8:	6878      	ldr	r0, [r7, #4]
 8001daa:	f000 f94d 	bl	8002048 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001dae:	6878      	ldr	r0, [r7, #4]
 8001db0:	f000 f95e 	bl	8002070 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	2200      	movs	r2, #0
 8001db8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	691b      	ldr	r3, [r3, #16]
 8001dc0:	f003 0310 	and.w	r3, r3, #16
 8001dc4:	2b10      	cmp	r3, #16
 8001dc6:	d122      	bne.n	8001e0e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	68db      	ldr	r3, [r3, #12]
 8001dce:	f003 0310 	and.w	r3, r3, #16
 8001dd2:	2b10      	cmp	r3, #16
 8001dd4:	d11b      	bne.n	8001e0e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f06f 0210 	mvn.w	r2, #16
 8001dde:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	2208      	movs	r2, #8
 8001de4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	69db      	ldr	r3, [r3, #28]
 8001dec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d003      	beq.n	8001dfc <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001df4:	6878      	ldr	r0, [r7, #4]
 8001df6:	f000 f931 	bl	800205c <HAL_TIM_IC_CaptureCallback>
 8001dfa:	e005      	b.n	8001e08 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001dfc:	6878      	ldr	r0, [r7, #4]
 8001dfe:	f000 f923 	bl	8002048 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e02:	6878      	ldr	r0, [r7, #4]
 8001e04:	f000 f934 	bl	8002070 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	691b      	ldr	r3, [r3, #16]
 8001e14:	f003 0301 	and.w	r3, r3, #1
 8001e18:	2b01      	cmp	r3, #1
 8001e1a:	d10e      	bne.n	8001e3a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	68db      	ldr	r3, [r3, #12]
 8001e22:	f003 0301 	and.w	r3, r3, #1
 8001e26:	2b01      	cmp	r3, #1
 8001e28:	d107      	bne.n	8001e3a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f06f 0201 	mvn.w	r2, #1
 8001e32:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001e34:	6878      	ldr	r0, [r7, #4]
 8001e36:	f000 f8fd 	bl	8002034 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	691b      	ldr	r3, [r3, #16]
 8001e40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e44:	2b80      	cmp	r3, #128	; 0x80
 8001e46:	d10e      	bne.n	8001e66 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	68db      	ldr	r3, [r3, #12]
 8001e4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e52:	2b80      	cmp	r3, #128	; 0x80
 8001e54:	d107      	bne.n	8001e66 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001e5e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001e60:	6878      	ldr	r0, [r7, #4]
 8001e62:	f000 faab 	bl	80023bc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	691b      	ldr	r3, [r3, #16]
 8001e6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e70:	2b40      	cmp	r3, #64	; 0x40
 8001e72:	d10e      	bne.n	8001e92 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	68db      	ldr	r3, [r3, #12]
 8001e7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e7e:	2b40      	cmp	r3, #64	; 0x40
 8001e80:	d107      	bne.n	8001e92 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001e8a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001e8c:	6878      	ldr	r0, [r7, #4]
 8001e8e:	f000 f8f9 	bl	8002084 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	691b      	ldr	r3, [r3, #16]
 8001e98:	f003 0320 	and.w	r3, r3, #32
 8001e9c:	2b20      	cmp	r3, #32
 8001e9e:	d10e      	bne.n	8001ebe <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	68db      	ldr	r3, [r3, #12]
 8001ea6:	f003 0320 	and.w	r3, r3, #32
 8001eaa:	2b20      	cmp	r3, #32
 8001eac:	d107      	bne.n	8001ebe <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f06f 0220 	mvn.w	r2, #32
 8001eb6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001eb8:	6878      	ldr	r0, [r7, #4]
 8001eba:	f000 fa75 	bl	80023a8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001ebe:	bf00      	nop
 8001ec0:	3708      	adds	r7, #8
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bd80      	pop	{r7, pc}

08001ec6 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001ec6:	b580      	push	{r7, lr}
 8001ec8:	b084      	sub	sp, #16
 8001eca:	af00      	add	r7, sp, #0
 8001ecc:	6078      	str	r0, [r7, #4]
 8001ece:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ed6:	2b01      	cmp	r3, #1
 8001ed8:	d101      	bne.n	8001ede <HAL_TIM_ConfigClockSource+0x18>
 8001eda:	2302      	movs	r3, #2
 8001edc:	e0a6      	b.n	800202c <HAL_TIM_ConfigClockSource+0x166>
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	2201      	movs	r2, #1
 8001ee2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	2202      	movs	r2, #2
 8001eea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	689b      	ldr	r3, [r3, #8]
 8001ef4:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8001efc:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001f04:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	68fa      	ldr	r2, [r7, #12]
 8001f0c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	2b40      	cmp	r3, #64	; 0x40
 8001f14:	d067      	beq.n	8001fe6 <HAL_TIM_ConfigClockSource+0x120>
 8001f16:	2b40      	cmp	r3, #64	; 0x40
 8001f18:	d80b      	bhi.n	8001f32 <HAL_TIM_ConfigClockSource+0x6c>
 8001f1a:	2b10      	cmp	r3, #16
 8001f1c:	d073      	beq.n	8002006 <HAL_TIM_ConfigClockSource+0x140>
 8001f1e:	2b10      	cmp	r3, #16
 8001f20:	d802      	bhi.n	8001f28 <HAL_TIM_ConfigClockSource+0x62>
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d06f      	beq.n	8002006 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8001f26:	e078      	b.n	800201a <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8001f28:	2b20      	cmp	r3, #32
 8001f2a:	d06c      	beq.n	8002006 <HAL_TIM_ConfigClockSource+0x140>
 8001f2c:	2b30      	cmp	r3, #48	; 0x30
 8001f2e:	d06a      	beq.n	8002006 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8001f30:	e073      	b.n	800201a <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8001f32:	2b70      	cmp	r3, #112	; 0x70
 8001f34:	d00d      	beq.n	8001f52 <HAL_TIM_ConfigClockSource+0x8c>
 8001f36:	2b70      	cmp	r3, #112	; 0x70
 8001f38:	d804      	bhi.n	8001f44 <HAL_TIM_ConfigClockSource+0x7e>
 8001f3a:	2b50      	cmp	r3, #80	; 0x50
 8001f3c:	d033      	beq.n	8001fa6 <HAL_TIM_ConfigClockSource+0xe0>
 8001f3e:	2b60      	cmp	r3, #96	; 0x60
 8001f40:	d041      	beq.n	8001fc6 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8001f42:	e06a      	b.n	800201a <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8001f44:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001f48:	d066      	beq.n	8002018 <HAL_TIM_ConfigClockSource+0x152>
 8001f4a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001f4e:	d017      	beq.n	8001f80 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8001f50:	e063      	b.n	800201a <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	6818      	ldr	r0, [r3, #0]
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	6899      	ldr	r1, [r3, #8]
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	685a      	ldr	r2, [r3, #4]
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	68db      	ldr	r3, [r3, #12]
 8001f62:	f000 f993 	bl	800228c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	689b      	ldr	r3, [r3, #8]
 8001f6c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8001f74:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	68fa      	ldr	r2, [r7, #12]
 8001f7c:	609a      	str	r2, [r3, #8]
      break;
 8001f7e:	e04c      	b.n	800201a <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	6818      	ldr	r0, [r3, #0]
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	6899      	ldr	r1, [r3, #8]
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	685a      	ldr	r2, [r3, #4]
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	68db      	ldr	r3, [r3, #12]
 8001f90:	f000 f97c 	bl	800228c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	689a      	ldr	r2, [r3, #8]
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001fa2:	609a      	str	r2, [r3, #8]
      break;
 8001fa4:	e039      	b.n	800201a <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	6818      	ldr	r0, [r3, #0]
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	6859      	ldr	r1, [r3, #4]
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	68db      	ldr	r3, [r3, #12]
 8001fb2:	461a      	mov	r2, r3
 8001fb4:	f000 f8f0 	bl	8002198 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	2150      	movs	r1, #80	; 0x50
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	f000 f949 	bl	8002256 <TIM_ITRx_SetConfig>
      break;
 8001fc4:	e029      	b.n	800201a <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	6818      	ldr	r0, [r3, #0]
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	6859      	ldr	r1, [r3, #4]
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	68db      	ldr	r3, [r3, #12]
 8001fd2:	461a      	mov	r2, r3
 8001fd4:	f000 f90f 	bl	80021f6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	2160      	movs	r1, #96	; 0x60
 8001fde:	4618      	mov	r0, r3
 8001fe0:	f000 f939 	bl	8002256 <TIM_ITRx_SetConfig>
      break;
 8001fe4:	e019      	b.n	800201a <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	6818      	ldr	r0, [r3, #0]
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	6859      	ldr	r1, [r3, #4]
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	68db      	ldr	r3, [r3, #12]
 8001ff2:	461a      	mov	r2, r3
 8001ff4:	f000 f8d0 	bl	8002198 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	2140      	movs	r1, #64	; 0x40
 8001ffe:	4618      	mov	r0, r3
 8002000:	f000 f929 	bl	8002256 <TIM_ITRx_SetConfig>
      break;
 8002004:	e009      	b.n	800201a <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681a      	ldr	r2, [r3, #0]
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	4619      	mov	r1, r3
 8002010:	4610      	mov	r0, r2
 8002012:	f000 f920 	bl	8002256 <TIM_ITRx_SetConfig>
      break;
 8002016:	e000      	b.n	800201a <HAL_TIM_ConfigClockSource+0x154>
      break;
 8002018:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	2201      	movs	r2, #1
 800201e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	2200      	movs	r2, #0
 8002026:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800202a:	2300      	movs	r3, #0
}
 800202c:	4618      	mov	r0, r3
 800202e:	3710      	adds	r7, #16
 8002030:	46bd      	mov	sp, r7
 8002032:	bd80      	pop	{r7, pc}

08002034 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002034:	b480      	push	{r7}
 8002036:	b083      	sub	sp, #12
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800203c:	bf00      	nop
 800203e:	370c      	adds	r7, #12
 8002040:	46bd      	mov	sp, r7
 8002042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002046:	4770      	bx	lr

08002048 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002048:	b480      	push	{r7}
 800204a:	b083      	sub	sp, #12
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002050:	bf00      	nop
 8002052:	370c      	adds	r7, #12
 8002054:	46bd      	mov	sp, r7
 8002056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205a:	4770      	bx	lr

0800205c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800205c:	b480      	push	{r7}
 800205e:	b083      	sub	sp, #12
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002064:	bf00      	nop
 8002066:	370c      	adds	r7, #12
 8002068:	46bd      	mov	sp, r7
 800206a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206e:	4770      	bx	lr

08002070 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002070:	b480      	push	{r7}
 8002072:	b083      	sub	sp, #12
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002078:	bf00      	nop
 800207a:	370c      	adds	r7, #12
 800207c:	46bd      	mov	sp, r7
 800207e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002082:	4770      	bx	lr

08002084 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002084:	b480      	push	{r7}
 8002086:	b083      	sub	sp, #12
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800208c:	bf00      	nop
 800208e:	370c      	adds	r7, #12
 8002090:	46bd      	mov	sp, r7
 8002092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002096:	4770      	bx	lr

08002098 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002098:	b480      	push	{r7}
 800209a:	b085      	sub	sp, #20
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
 80020a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	4a34      	ldr	r2, [pc, #208]	; (800217c <TIM_Base_SetConfig+0xe4>)
 80020ac:	4293      	cmp	r3, r2
 80020ae:	d00f      	beq.n	80020d0 <TIM_Base_SetConfig+0x38>
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020b6:	d00b      	beq.n	80020d0 <TIM_Base_SetConfig+0x38>
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	4a31      	ldr	r2, [pc, #196]	; (8002180 <TIM_Base_SetConfig+0xe8>)
 80020bc:	4293      	cmp	r3, r2
 80020be:	d007      	beq.n	80020d0 <TIM_Base_SetConfig+0x38>
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	4a30      	ldr	r2, [pc, #192]	; (8002184 <TIM_Base_SetConfig+0xec>)
 80020c4:	4293      	cmp	r3, r2
 80020c6:	d003      	beq.n	80020d0 <TIM_Base_SetConfig+0x38>
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	4a2f      	ldr	r2, [pc, #188]	; (8002188 <TIM_Base_SetConfig+0xf0>)
 80020cc:	4293      	cmp	r3, r2
 80020ce:	d108      	bne.n	80020e2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80020d6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	68fa      	ldr	r2, [r7, #12]
 80020de:	4313      	orrs	r3, r2
 80020e0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	4a25      	ldr	r2, [pc, #148]	; (800217c <TIM_Base_SetConfig+0xe4>)
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d01b      	beq.n	8002122 <TIM_Base_SetConfig+0x8a>
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020f0:	d017      	beq.n	8002122 <TIM_Base_SetConfig+0x8a>
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	4a22      	ldr	r2, [pc, #136]	; (8002180 <TIM_Base_SetConfig+0xe8>)
 80020f6:	4293      	cmp	r3, r2
 80020f8:	d013      	beq.n	8002122 <TIM_Base_SetConfig+0x8a>
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	4a21      	ldr	r2, [pc, #132]	; (8002184 <TIM_Base_SetConfig+0xec>)
 80020fe:	4293      	cmp	r3, r2
 8002100:	d00f      	beq.n	8002122 <TIM_Base_SetConfig+0x8a>
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	4a20      	ldr	r2, [pc, #128]	; (8002188 <TIM_Base_SetConfig+0xf0>)
 8002106:	4293      	cmp	r3, r2
 8002108:	d00b      	beq.n	8002122 <TIM_Base_SetConfig+0x8a>
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	4a1f      	ldr	r2, [pc, #124]	; (800218c <TIM_Base_SetConfig+0xf4>)
 800210e:	4293      	cmp	r3, r2
 8002110:	d007      	beq.n	8002122 <TIM_Base_SetConfig+0x8a>
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	4a1e      	ldr	r2, [pc, #120]	; (8002190 <TIM_Base_SetConfig+0xf8>)
 8002116:	4293      	cmp	r3, r2
 8002118:	d003      	beq.n	8002122 <TIM_Base_SetConfig+0x8a>
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	4a1d      	ldr	r2, [pc, #116]	; (8002194 <TIM_Base_SetConfig+0xfc>)
 800211e:	4293      	cmp	r3, r2
 8002120:	d108      	bne.n	8002134 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002128:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	68db      	ldr	r3, [r3, #12]
 800212e:	68fa      	ldr	r2, [r7, #12]
 8002130:	4313      	orrs	r3, r2
 8002132:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	695b      	ldr	r3, [r3, #20]
 800213e:	4313      	orrs	r3, r2
 8002140:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	68fa      	ldr	r2, [r7, #12]
 8002146:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	689a      	ldr	r2, [r3, #8]
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	681a      	ldr	r2, [r3, #0]
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	4a08      	ldr	r2, [pc, #32]	; (800217c <TIM_Base_SetConfig+0xe4>)
 800215c:	4293      	cmp	r3, r2
 800215e:	d103      	bne.n	8002168 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	691a      	ldr	r2, [r3, #16]
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2201      	movs	r2, #1
 800216c:	615a      	str	r2, [r3, #20]
}
 800216e:	bf00      	nop
 8002170:	3714      	adds	r7, #20
 8002172:	46bd      	mov	sp, r7
 8002174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002178:	4770      	bx	lr
 800217a:	bf00      	nop
 800217c:	40010000 	.word	0x40010000
 8002180:	40000400 	.word	0x40000400
 8002184:	40000800 	.word	0x40000800
 8002188:	40000c00 	.word	0x40000c00
 800218c:	40014000 	.word	0x40014000
 8002190:	40014400 	.word	0x40014400
 8002194:	40014800 	.word	0x40014800

08002198 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002198:	b480      	push	{r7}
 800219a:	b087      	sub	sp, #28
 800219c:	af00      	add	r7, sp, #0
 800219e:	60f8      	str	r0, [r7, #12]
 80021a0:	60b9      	str	r1, [r7, #8]
 80021a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	6a1b      	ldr	r3, [r3, #32]
 80021a8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	6a1b      	ldr	r3, [r3, #32]
 80021ae:	f023 0201 	bic.w	r2, r3, #1
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	699b      	ldr	r3, [r3, #24]
 80021ba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80021bc:	693b      	ldr	r3, [r7, #16]
 80021be:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80021c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	011b      	lsls	r3, r3, #4
 80021c8:	693a      	ldr	r2, [r7, #16]
 80021ca:	4313      	orrs	r3, r2
 80021cc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80021ce:	697b      	ldr	r3, [r7, #20]
 80021d0:	f023 030a 	bic.w	r3, r3, #10
 80021d4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80021d6:	697a      	ldr	r2, [r7, #20]
 80021d8:	68bb      	ldr	r3, [r7, #8]
 80021da:	4313      	orrs	r3, r2
 80021dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	693a      	ldr	r2, [r7, #16]
 80021e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	697a      	ldr	r2, [r7, #20]
 80021e8:	621a      	str	r2, [r3, #32]
}
 80021ea:	bf00      	nop
 80021ec:	371c      	adds	r7, #28
 80021ee:	46bd      	mov	sp, r7
 80021f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f4:	4770      	bx	lr

080021f6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80021f6:	b480      	push	{r7}
 80021f8:	b087      	sub	sp, #28
 80021fa:	af00      	add	r7, sp, #0
 80021fc:	60f8      	str	r0, [r7, #12]
 80021fe:	60b9      	str	r1, [r7, #8]
 8002200:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	6a1b      	ldr	r3, [r3, #32]
 8002206:	f023 0210 	bic.w	r2, r3, #16
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	699b      	ldr	r3, [r3, #24]
 8002212:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	6a1b      	ldr	r3, [r3, #32]
 8002218:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800221a:	697b      	ldr	r3, [r7, #20]
 800221c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002220:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	031b      	lsls	r3, r3, #12
 8002226:	697a      	ldr	r2, [r7, #20]
 8002228:	4313      	orrs	r3, r2
 800222a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800222c:	693b      	ldr	r3, [r7, #16]
 800222e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002232:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002234:	68bb      	ldr	r3, [r7, #8]
 8002236:	011b      	lsls	r3, r3, #4
 8002238:	693a      	ldr	r2, [r7, #16]
 800223a:	4313      	orrs	r3, r2
 800223c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	697a      	ldr	r2, [r7, #20]
 8002242:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	693a      	ldr	r2, [r7, #16]
 8002248:	621a      	str	r2, [r3, #32]
}
 800224a:	bf00      	nop
 800224c:	371c      	adds	r7, #28
 800224e:	46bd      	mov	sp, r7
 8002250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002254:	4770      	bx	lr

08002256 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002256:	b480      	push	{r7}
 8002258:	b085      	sub	sp, #20
 800225a:	af00      	add	r7, sp, #0
 800225c:	6078      	str	r0, [r7, #4]
 800225e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	689b      	ldr	r3, [r3, #8]
 8002264:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800226c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800226e:	683a      	ldr	r2, [r7, #0]
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	4313      	orrs	r3, r2
 8002274:	f043 0307 	orr.w	r3, r3, #7
 8002278:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	68fa      	ldr	r2, [r7, #12]
 800227e:	609a      	str	r2, [r3, #8]
}
 8002280:	bf00      	nop
 8002282:	3714      	adds	r7, #20
 8002284:	46bd      	mov	sp, r7
 8002286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228a:	4770      	bx	lr

0800228c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800228c:	b480      	push	{r7}
 800228e:	b087      	sub	sp, #28
 8002290:	af00      	add	r7, sp, #0
 8002292:	60f8      	str	r0, [r7, #12]
 8002294:	60b9      	str	r1, [r7, #8]
 8002296:	607a      	str	r2, [r7, #4]
 8002298:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	689b      	ldr	r3, [r3, #8]
 800229e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80022a0:	697b      	ldr	r3, [r7, #20]
 80022a2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80022a6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	021a      	lsls	r2, r3, #8
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	431a      	orrs	r2, r3
 80022b0:	68bb      	ldr	r3, [r7, #8]
 80022b2:	4313      	orrs	r3, r2
 80022b4:	697a      	ldr	r2, [r7, #20]
 80022b6:	4313      	orrs	r3, r2
 80022b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	697a      	ldr	r2, [r7, #20]
 80022be:	609a      	str	r2, [r3, #8]
}
 80022c0:	bf00      	nop
 80022c2:	371c      	adds	r7, #28
 80022c4:	46bd      	mov	sp, r7
 80022c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ca:	4770      	bx	lr

080022cc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80022cc:	b480      	push	{r7}
 80022ce:	b085      	sub	sp, #20
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
 80022d4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80022dc:	2b01      	cmp	r3, #1
 80022de:	d101      	bne.n	80022e4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80022e0:	2302      	movs	r3, #2
 80022e2:	e050      	b.n	8002386 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2201      	movs	r2, #1
 80022e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	2202      	movs	r2, #2
 80022f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	689b      	ldr	r3, [r3, #8]
 8002302:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800230a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	68fa      	ldr	r2, [r7, #12]
 8002312:	4313      	orrs	r3, r2
 8002314:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	68fa      	ldr	r2, [r7, #12]
 800231c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	4a1c      	ldr	r2, [pc, #112]	; (8002394 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8002324:	4293      	cmp	r3, r2
 8002326:	d018      	beq.n	800235a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002330:	d013      	beq.n	800235a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	4a18      	ldr	r2, [pc, #96]	; (8002398 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8002338:	4293      	cmp	r3, r2
 800233a:	d00e      	beq.n	800235a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4a16      	ldr	r2, [pc, #88]	; (800239c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8002342:	4293      	cmp	r3, r2
 8002344:	d009      	beq.n	800235a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	4a15      	ldr	r2, [pc, #84]	; (80023a0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800234c:	4293      	cmp	r3, r2
 800234e:	d004      	beq.n	800235a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	4a13      	ldr	r2, [pc, #76]	; (80023a4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8002356:	4293      	cmp	r3, r2
 8002358:	d10c      	bne.n	8002374 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800235a:	68bb      	ldr	r3, [r7, #8]
 800235c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002360:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	685b      	ldr	r3, [r3, #4]
 8002366:	68ba      	ldr	r2, [r7, #8]
 8002368:	4313      	orrs	r3, r2
 800236a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	68ba      	ldr	r2, [r7, #8]
 8002372:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	2201      	movs	r2, #1
 8002378:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2200      	movs	r2, #0
 8002380:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002384:	2300      	movs	r3, #0
}
 8002386:	4618      	mov	r0, r3
 8002388:	3714      	adds	r7, #20
 800238a:	46bd      	mov	sp, r7
 800238c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002390:	4770      	bx	lr
 8002392:	bf00      	nop
 8002394:	40010000 	.word	0x40010000
 8002398:	40000400 	.word	0x40000400
 800239c:	40000800 	.word	0x40000800
 80023a0:	40000c00 	.word	0x40000c00
 80023a4:	40014000 	.word	0x40014000

080023a8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80023a8:	b480      	push	{r7}
 80023aa:	b083      	sub	sp, #12
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80023b0:	bf00      	nop
 80023b2:	370c      	adds	r7, #12
 80023b4:	46bd      	mov	sp, r7
 80023b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ba:	4770      	bx	lr

080023bc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80023bc:	b480      	push	{r7}
 80023be:	b083      	sub	sp, #12
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80023c4:	bf00      	nop
 80023c6:	370c      	adds	r7, #12
 80023c8:	46bd      	mov	sp, r7
 80023ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ce:	4770      	bx	lr

080023d0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b082      	sub	sp, #8
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d101      	bne.n	80023e2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80023de:	2301      	movs	r3, #1
 80023e0:	e03f      	b.n	8002462 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80023e8:	b2db      	uxtb	r3, r3
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d106      	bne.n	80023fc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	2200      	movs	r2, #0
 80023f2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80023f6:	6878      	ldr	r0, [r7, #4]
 80023f8:	f7fe fa62 	bl	80008c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2224      	movs	r2, #36	; 0x24
 8002400:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	68da      	ldr	r2, [r3, #12]
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002412:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002414:	6878      	ldr	r0, [r7, #4]
 8002416:	f000 f90b 	bl	8002630 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	691a      	ldr	r2, [r3, #16]
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002428:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	695a      	ldr	r2, [r3, #20]
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002438:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	68da      	ldr	r2, [r3, #12]
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002448:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	2200      	movs	r2, #0
 800244e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2220      	movs	r2, #32
 8002454:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2220      	movs	r2, #32
 800245c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002460:	2300      	movs	r3, #0
}
 8002462:	4618      	mov	r0, r3
 8002464:	3708      	adds	r7, #8
 8002466:	46bd      	mov	sp, r7
 8002468:	bd80      	pop	{r7, pc}

0800246a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800246a:	b580      	push	{r7, lr}
 800246c:	b088      	sub	sp, #32
 800246e:	af02      	add	r7, sp, #8
 8002470:	60f8      	str	r0, [r7, #12]
 8002472:	60b9      	str	r1, [r7, #8]
 8002474:	603b      	str	r3, [r7, #0]
 8002476:	4613      	mov	r3, r2
 8002478:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800247a:	2300      	movs	r3, #0
 800247c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002484:	b2db      	uxtb	r3, r3
 8002486:	2b20      	cmp	r3, #32
 8002488:	f040 8083 	bne.w	8002592 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 800248c:	68bb      	ldr	r3, [r7, #8]
 800248e:	2b00      	cmp	r3, #0
 8002490:	d002      	beq.n	8002498 <HAL_UART_Transmit+0x2e>
 8002492:	88fb      	ldrh	r3, [r7, #6]
 8002494:	2b00      	cmp	r3, #0
 8002496:	d101      	bne.n	800249c <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8002498:	2301      	movs	r3, #1
 800249a:	e07b      	b.n	8002594 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80024a2:	2b01      	cmp	r3, #1
 80024a4:	d101      	bne.n	80024aa <HAL_UART_Transmit+0x40>
 80024a6:	2302      	movs	r3, #2
 80024a8:	e074      	b.n	8002594 <HAL_UART_Transmit+0x12a>
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	2201      	movs	r2, #1
 80024ae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	2200      	movs	r2, #0
 80024b6:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	2221      	movs	r2, #33	; 0x21
 80024bc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80024c0:	f7fe fc54 	bl	8000d6c <HAL_GetTick>
 80024c4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	88fa      	ldrh	r2, [r7, #6]
 80024ca:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	88fa      	ldrh	r2, [r7, #6]
 80024d0:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	2200      	movs	r2, #0
 80024d6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 80024da:	e042      	b.n	8002562 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80024e0:	b29b      	uxth	r3, r3
 80024e2:	3b01      	subs	r3, #1
 80024e4:	b29a      	uxth	r2, r3
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	689b      	ldr	r3, [r3, #8]
 80024ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80024f2:	d122      	bne.n	800253a <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	9300      	str	r3, [sp, #0]
 80024f8:	697b      	ldr	r3, [r7, #20]
 80024fa:	2200      	movs	r2, #0
 80024fc:	2180      	movs	r1, #128	; 0x80
 80024fe:	68f8      	ldr	r0, [r7, #12]
 8002500:	f000 f84c 	bl	800259c <UART_WaitOnFlagUntilTimeout>
 8002504:	4603      	mov	r3, r0
 8002506:	2b00      	cmp	r3, #0
 8002508:	d001      	beq.n	800250e <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 800250a:	2303      	movs	r3, #3
 800250c:	e042      	b.n	8002594 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 800250e:	68bb      	ldr	r3, [r7, #8]
 8002510:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8002512:	693b      	ldr	r3, [r7, #16]
 8002514:	881b      	ldrh	r3, [r3, #0]
 8002516:	461a      	mov	r2, r3
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002520:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	691b      	ldr	r3, [r3, #16]
 8002526:	2b00      	cmp	r3, #0
 8002528:	d103      	bne.n	8002532 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 800252a:	68bb      	ldr	r3, [r7, #8]
 800252c:	3302      	adds	r3, #2
 800252e:	60bb      	str	r3, [r7, #8]
 8002530:	e017      	b.n	8002562 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8002532:	68bb      	ldr	r3, [r7, #8]
 8002534:	3301      	adds	r3, #1
 8002536:	60bb      	str	r3, [r7, #8]
 8002538:	e013      	b.n	8002562 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	9300      	str	r3, [sp, #0]
 800253e:	697b      	ldr	r3, [r7, #20]
 8002540:	2200      	movs	r2, #0
 8002542:	2180      	movs	r1, #128	; 0x80
 8002544:	68f8      	ldr	r0, [r7, #12]
 8002546:	f000 f829 	bl	800259c <UART_WaitOnFlagUntilTimeout>
 800254a:	4603      	mov	r3, r0
 800254c:	2b00      	cmp	r3, #0
 800254e:	d001      	beq.n	8002554 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8002550:	2303      	movs	r3, #3
 8002552:	e01f      	b.n	8002594 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8002554:	68bb      	ldr	r3, [r7, #8]
 8002556:	1c5a      	adds	r2, r3, #1
 8002558:	60ba      	str	r2, [r7, #8]
 800255a:	781a      	ldrb	r2, [r3, #0]
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002566:	b29b      	uxth	r3, r3
 8002568:	2b00      	cmp	r3, #0
 800256a:	d1b7      	bne.n	80024dc <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	9300      	str	r3, [sp, #0]
 8002570:	697b      	ldr	r3, [r7, #20]
 8002572:	2200      	movs	r2, #0
 8002574:	2140      	movs	r1, #64	; 0x40
 8002576:	68f8      	ldr	r0, [r7, #12]
 8002578:	f000 f810 	bl	800259c <UART_WaitOnFlagUntilTimeout>
 800257c:	4603      	mov	r3, r0
 800257e:	2b00      	cmp	r3, #0
 8002580:	d001      	beq.n	8002586 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8002582:	2303      	movs	r3, #3
 8002584:	e006      	b.n	8002594 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	2220      	movs	r2, #32
 800258a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 800258e:	2300      	movs	r3, #0
 8002590:	e000      	b.n	8002594 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8002592:	2302      	movs	r3, #2
  }
}
 8002594:	4618      	mov	r0, r3
 8002596:	3718      	adds	r7, #24
 8002598:	46bd      	mov	sp, r7
 800259a:	bd80      	pop	{r7, pc}

0800259c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b084      	sub	sp, #16
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	60f8      	str	r0, [r7, #12]
 80025a4:	60b9      	str	r1, [r7, #8]
 80025a6:	603b      	str	r3, [r7, #0]
 80025a8:	4613      	mov	r3, r2
 80025aa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80025ac:	e02c      	b.n	8002608 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80025ae:	69bb      	ldr	r3, [r7, #24]
 80025b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025b4:	d028      	beq.n	8002608 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80025b6:	69bb      	ldr	r3, [r7, #24]
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d007      	beq.n	80025cc <UART_WaitOnFlagUntilTimeout+0x30>
 80025bc:	f7fe fbd6 	bl	8000d6c <HAL_GetTick>
 80025c0:	4602      	mov	r2, r0
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	1ad3      	subs	r3, r2, r3
 80025c6:	69ba      	ldr	r2, [r7, #24]
 80025c8:	429a      	cmp	r2, r3
 80025ca:	d21d      	bcs.n	8002608 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	68da      	ldr	r2, [r3, #12]
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80025da:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	695a      	ldr	r2, [r3, #20]
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f022 0201 	bic.w	r2, r2, #1
 80025ea:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	2220      	movs	r2, #32
 80025f0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	2220      	movs	r2, #32
 80025f8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	2200      	movs	r2, #0
 8002600:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8002604:	2303      	movs	r3, #3
 8002606:	e00f      	b.n	8002628 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	681a      	ldr	r2, [r3, #0]
 800260e:	68bb      	ldr	r3, [r7, #8]
 8002610:	4013      	ands	r3, r2
 8002612:	68ba      	ldr	r2, [r7, #8]
 8002614:	429a      	cmp	r2, r3
 8002616:	bf0c      	ite	eq
 8002618:	2301      	moveq	r3, #1
 800261a:	2300      	movne	r3, #0
 800261c:	b2db      	uxtb	r3, r3
 800261e:	461a      	mov	r2, r3
 8002620:	79fb      	ldrb	r3, [r7, #7]
 8002622:	429a      	cmp	r2, r3
 8002624:	d0c3      	beq.n	80025ae <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002626:	2300      	movs	r3, #0
}
 8002628:	4618      	mov	r0, r3
 800262a:	3710      	adds	r7, #16
 800262c:	46bd      	mov	sp, r7
 800262e:	bd80      	pop	{r7, pc}

08002630 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002630:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002634:	b085      	sub	sp, #20
 8002636:	af00      	add	r7, sp, #0
 8002638:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	691b      	ldr	r3, [r3, #16]
 8002640:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	68da      	ldr	r2, [r3, #12]
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	430a      	orrs	r2, r1
 800264e:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	689a      	ldr	r2, [r3, #8]
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	691b      	ldr	r3, [r3, #16]
 8002658:	431a      	orrs	r2, r3
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	695b      	ldr	r3, [r3, #20]
 800265e:	431a      	orrs	r2, r3
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	69db      	ldr	r3, [r3, #28]
 8002664:	4313      	orrs	r3, r2
 8002666:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	68db      	ldr	r3, [r3, #12]
 800266e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8002672:	f023 030c 	bic.w	r3, r3, #12
 8002676:	687a      	ldr	r2, [r7, #4]
 8002678:	6812      	ldr	r2, [r2, #0]
 800267a:	68f9      	ldr	r1, [r7, #12]
 800267c:	430b      	orrs	r3, r1
 800267e:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	695b      	ldr	r3, [r3, #20]
 8002686:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	699a      	ldr	r2, [r3, #24]
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	430a      	orrs	r2, r1
 8002694:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	69db      	ldr	r3, [r3, #28]
 800269a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800269e:	f040 818b 	bne.w	80029b8 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	4ac1      	ldr	r2, [pc, #772]	; (80029ac <UART_SetConfig+0x37c>)
 80026a8:	4293      	cmp	r3, r2
 80026aa:	d005      	beq.n	80026b8 <UART_SetConfig+0x88>
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	4abf      	ldr	r2, [pc, #764]	; (80029b0 <UART_SetConfig+0x380>)
 80026b2:	4293      	cmp	r3, r2
 80026b4:	f040 80bd 	bne.w	8002832 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80026b8:	f7ff fabe 	bl	8001c38 <HAL_RCC_GetPCLK2Freq>
 80026bc:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80026be:	68bb      	ldr	r3, [r7, #8]
 80026c0:	461d      	mov	r5, r3
 80026c2:	f04f 0600 	mov.w	r6, #0
 80026c6:	46a8      	mov	r8, r5
 80026c8:	46b1      	mov	r9, r6
 80026ca:	eb18 0308 	adds.w	r3, r8, r8
 80026ce:	eb49 0409 	adc.w	r4, r9, r9
 80026d2:	4698      	mov	r8, r3
 80026d4:	46a1      	mov	r9, r4
 80026d6:	eb18 0805 	adds.w	r8, r8, r5
 80026da:	eb49 0906 	adc.w	r9, r9, r6
 80026de:	f04f 0100 	mov.w	r1, #0
 80026e2:	f04f 0200 	mov.w	r2, #0
 80026e6:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80026ea:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80026ee:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80026f2:	4688      	mov	r8, r1
 80026f4:	4691      	mov	r9, r2
 80026f6:	eb18 0005 	adds.w	r0, r8, r5
 80026fa:	eb49 0106 	adc.w	r1, r9, r6
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	685b      	ldr	r3, [r3, #4]
 8002702:	461d      	mov	r5, r3
 8002704:	f04f 0600 	mov.w	r6, #0
 8002708:	196b      	adds	r3, r5, r5
 800270a:	eb46 0406 	adc.w	r4, r6, r6
 800270e:	461a      	mov	r2, r3
 8002710:	4623      	mov	r3, r4
 8002712:	f7fd fd61 	bl	80001d8 <__aeabi_uldivmod>
 8002716:	4603      	mov	r3, r0
 8002718:	460c      	mov	r4, r1
 800271a:	461a      	mov	r2, r3
 800271c:	4ba5      	ldr	r3, [pc, #660]	; (80029b4 <UART_SetConfig+0x384>)
 800271e:	fba3 2302 	umull	r2, r3, r3, r2
 8002722:	095b      	lsrs	r3, r3, #5
 8002724:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002728:	68bb      	ldr	r3, [r7, #8]
 800272a:	461d      	mov	r5, r3
 800272c:	f04f 0600 	mov.w	r6, #0
 8002730:	46a9      	mov	r9, r5
 8002732:	46b2      	mov	sl, r6
 8002734:	eb19 0309 	adds.w	r3, r9, r9
 8002738:	eb4a 040a 	adc.w	r4, sl, sl
 800273c:	4699      	mov	r9, r3
 800273e:	46a2      	mov	sl, r4
 8002740:	eb19 0905 	adds.w	r9, r9, r5
 8002744:	eb4a 0a06 	adc.w	sl, sl, r6
 8002748:	f04f 0100 	mov.w	r1, #0
 800274c:	f04f 0200 	mov.w	r2, #0
 8002750:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002754:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002758:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800275c:	4689      	mov	r9, r1
 800275e:	4692      	mov	sl, r2
 8002760:	eb19 0005 	adds.w	r0, r9, r5
 8002764:	eb4a 0106 	adc.w	r1, sl, r6
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	685b      	ldr	r3, [r3, #4]
 800276c:	461d      	mov	r5, r3
 800276e:	f04f 0600 	mov.w	r6, #0
 8002772:	196b      	adds	r3, r5, r5
 8002774:	eb46 0406 	adc.w	r4, r6, r6
 8002778:	461a      	mov	r2, r3
 800277a:	4623      	mov	r3, r4
 800277c:	f7fd fd2c 	bl	80001d8 <__aeabi_uldivmod>
 8002780:	4603      	mov	r3, r0
 8002782:	460c      	mov	r4, r1
 8002784:	461a      	mov	r2, r3
 8002786:	4b8b      	ldr	r3, [pc, #556]	; (80029b4 <UART_SetConfig+0x384>)
 8002788:	fba3 1302 	umull	r1, r3, r3, r2
 800278c:	095b      	lsrs	r3, r3, #5
 800278e:	2164      	movs	r1, #100	; 0x64
 8002790:	fb01 f303 	mul.w	r3, r1, r3
 8002794:	1ad3      	subs	r3, r2, r3
 8002796:	00db      	lsls	r3, r3, #3
 8002798:	3332      	adds	r3, #50	; 0x32
 800279a:	4a86      	ldr	r2, [pc, #536]	; (80029b4 <UART_SetConfig+0x384>)
 800279c:	fba2 2303 	umull	r2, r3, r2, r3
 80027a0:	095b      	lsrs	r3, r3, #5
 80027a2:	005b      	lsls	r3, r3, #1
 80027a4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80027a8:	4498      	add	r8, r3
 80027aa:	68bb      	ldr	r3, [r7, #8]
 80027ac:	461d      	mov	r5, r3
 80027ae:	f04f 0600 	mov.w	r6, #0
 80027b2:	46a9      	mov	r9, r5
 80027b4:	46b2      	mov	sl, r6
 80027b6:	eb19 0309 	adds.w	r3, r9, r9
 80027ba:	eb4a 040a 	adc.w	r4, sl, sl
 80027be:	4699      	mov	r9, r3
 80027c0:	46a2      	mov	sl, r4
 80027c2:	eb19 0905 	adds.w	r9, r9, r5
 80027c6:	eb4a 0a06 	adc.w	sl, sl, r6
 80027ca:	f04f 0100 	mov.w	r1, #0
 80027ce:	f04f 0200 	mov.w	r2, #0
 80027d2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80027d6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80027da:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80027de:	4689      	mov	r9, r1
 80027e0:	4692      	mov	sl, r2
 80027e2:	eb19 0005 	adds.w	r0, r9, r5
 80027e6:	eb4a 0106 	adc.w	r1, sl, r6
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	685b      	ldr	r3, [r3, #4]
 80027ee:	461d      	mov	r5, r3
 80027f0:	f04f 0600 	mov.w	r6, #0
 80027f4:	196b      	adds	r3, r5, r5
 80027f6:	eb46 0406 	adc.w	r4, r6, r6
 80027fa:	461a      	mov	r2, r3
 80027fc:	4623      	mov	r3, r4
 80027fe:	f7fd fceb 	bl	80001d8 <__aeabi_uldivmod>
 8002802:	4603      	mov	r3, r0
 8002804:	460c      	mov	r4, r1
 8002806:	461a      	mov	r2, r3
 8002808:	4b6a      	ldr	r3, [pc, #424]	; (80029b4 <UART_SetConfig+0x384>)
 800280a:	fba3 1302 	umull	r1, r3, r3, r2
 800280e:	095b      	lsrs	r3, r3, #5
 8002810:	2164      	movs	r1, #100	; 0x64
 8002812:	fb01 f303 	mul.w	r3, r1, r3
 8002816:	1ad3      	subs	r3, r2, r3
 8002818:	00db      	lsls	r3, r3, #3
 800281a:	3332      	adds	r3, #50	; 0x32
 800281c:	4a65      	ldr	r2, [pc, #404]	; (80029b4 <UART_SetConfig+0x384>)
 800281e:	fba2 2303 	umull	r2, r3, r2, r3
 8002822:	095b      	lsrs	r3, r3, #5
 8002824:	f003 0207 	and.w	r2, r3, #7
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	4442      	add	r2, r8
 800282e:	609a      	str	r2, [r3, #8]
 8002830:	e26f      	b.n	8002d12 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002832:	f7ff f9ed 	bl	8001c10 <HAL_RCC_GetPCLK1Freq>
 8002836:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002838:	68bb      	ldr	r3, [r7, #8]
 800283a:	461d      	mov	r5, r3
 800283c:	f04f 0600 	mov.w	r6, #0
 8002840:	46a8      	mov	r8, r5
 8002842:	46b1      	mov	r9, r6
 8002844:	eb18 0308 	adds.w	r3, r8, r8
 8002848:	eb49 0409 	adc.w	r4, r9, r9
 800284c:	4698      	mov	r8, r3
 800284e:	46a1      	mov	r9, r4
 8002850:	eb18 0805 	adds.w	r8, r8, r5
 8002854:	eb49 0906 	adc.w	r9, r9, r6
 8002858:	f04f 0100 	mov.w	r1, #0
 800285c:	f04f 0200 	mov.w	r2, #0
 8002860:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002864:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002868:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800286c:	4688      	mov	r8, r1
 800286e:	4691      	mov	r9, r2
 8002870:	eb18 0005 	adds.w	r0, r8, r5
 8002874:	eb49 0106 	adc.w	r1, r9, r6
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	685b      	ldr	r3, [r3, #4]
 800287c:	461d      	mov	r5, r3
 800287e:	f04f 0600 	mov.w	r6, #0
 8002882:	196b      	adds	r3, r5, r5
 8002884:	eb46 0406 	adc.w	r4, r6, r6
 8002888:	461a      	mov	r2, r3
 800288a:	4623      	mov	r3, r4
 800288c:	f7fd fca4 	bl	80001d8 <__aeabi_uldivmod>
 8002890:	4603      	mov	r3, r0
 8002892:	460c      	mov	r4, r1
 8002894:	461a      	mov	r2, r3
 8002896:	4b47      	ldr	r3, [pc, #284]	; (80029b4 <UART_SetConfig+0x384>)
 8002898:	fba3 2302 	umull	r2, r3, r3, r2
 800289c:	095b      	lsrs	r3, r3, #5
 800289e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80028a2:	68bb      	ldr	r3, [r7, #8]
 80028a4:	461d      	mov	r5, r3
 80028a6:	f04f 0600 	mov.w	r6, #0
 80028aa:	46a9      	mov	r9, r5
 80028ac:	46b2      	mov	sl, r6
 80028ae:	eb19 0309 	adds.w	r3, r9, r9
 80028b2:	eb4a 040a 	adc.w	r4, sl, sl
 80028b6:	4699      	mov	r9, r3
 80028b8:	46a2      	mov	sl, r4
 80028ba:	eb19 0905 	adds.w	r9, r9, r5
 80028be:	eb4a 0a06 	adc.w	sl, sl, r6
 80028c2:	f04f 0100 	mov.w	r1, #0
 80028c6:	f04f 0200 	mov.w	r2, #0
 80028ca:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80028ce:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80028d2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80028d6:	4689      	mov	r9, r1
 80028d8:	4692      	mov	sl, r2
 80028da:	eb19 0005 	adds.w	r0, r9, r5
 80028de:	eb4a 0106 	adc.w	r1, sl, r6
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	685b      	ldr	r3, [r3, #4]
 80028e6:	461d      	mov	r5, r3
 80028e8:	f04f 0600 	mov.w	r6, #0
 80028ec:	196b      	adds	r3, r5, r5
 80028ee:	eb46 0406 	adc.w	r4, r6, r6
 80028f2:	461a      	mov	r2, r3
 80028f4:	4623      	mov	r3, r4
 80028f6:	f7fd fc6f 	bl	80001d8 <__aeabi_uldivmod>
 80028fa:	4603      	mov	r3, r0
 80028fc:	460c      	mov	r4, r1
 80028fe:	461a      	mov	r2, r3
 8002900:	4b2c      	ldr	r3, [pc, #176]	; (80029b4 <UART_SetConfig+0x384>)
 8002902:	fba3 1302 	umull	r1, r3, r3, r2
 8002906:	095b      	lsrs	r3, r3, #5
 8002908:	2164      	movs	r1, #100	; 0x64
 800290a:	fb01 f303 	mul.w	r3, r1, r3
 800290e:	1ad3      	subs	r3, r2, r3
 8002910:	00db      	lsls	r3, r3, #3
 8002912:	3332      	adds	r3, #50	; 0x32
 8002914:	4a27      	ldr	r2, [pc, #156]	; (80029b4 <UART_SetConfig+0x384>)
 8002916:	fba2 2303 	umull	r2, r3, r2, r3
 800291a:	095b      	lsrs	r3, r3, #5
 800291c:	005b      	lsls	r3, r3, #1
 800291e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002922:	4498      	add	r8, r3
 8002924:	68bb      	ldr	r3, [r7, #8]
 8002926:	461d      	mov	r5, r3
 8002928:	f04f 0600 	mov.w	r6, #0
 800292c:	46a9      	mov	r9, r5
 800292e:	46b2      	mov	sl, r6
 8002930:	eb19 0309 	adds.w	r3, r9, r9
 8002934:	eb4a 040a 	adc.w	r4, sl, sl
 8002938:	4699      	mov	r9, r3
 800293a:	46a2      	mov	sl, r4
 800293c:	eb19 0905 	adds.w	r9, r9, r5
 8002940:	eb4a 0a06 	adc.w	sl, sl, r6
 8002944:	f04f 0100 	mov.w	r1, #0
 8002948:	f04f 0200 	mov.w	r2, #0
 800294c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002950:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002954:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002958:	4689      	mov	r9, r1
 800295a:	4692      	mov	sl, r2
 800295c:	eb19 0005 	adds.w	r0, r9, r5
 8002960:	eb4a 0106 	adc.w	r1, sl, r6
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	685b      	ldr	r3, [r3, #4]
 8002968:	461d      	mov	r5, r3
 800296a:	f04f 0600 	mov.w	r6, #0
 800296e:	196b      	adds	r3, r5, r5
 8002970:	eb46 0406 	adc.w	r4, r6, r6
 8002974:	461a      	mov	r2, r3
 8002976:	4623      	mov	r3, r4
 8002978:	f7fd fc2e 	bl	80001d8 <__aeabi_uldivmod>
 800297c:	4603      	mov	r3, r0
 800297e:	460c      	mov	r4, r1
 8002980:	461a      	mov	r2, r3
 8002982:	4b0c      	ldr	r3, [pc, #48]	; (80029b4 <UART_SetConfig+0x384>)
 8002984:	fba3 1302 	umull	r1, r3, r3, r2
 8002988:	095b      	lsrs	r3, r3, #5
 800298a:	2164      	movs	r1, #100	; 0x64
 800298c:	fb01 f303 	mul.w	r3, r1, r3
 8002990:	1ad3      	subs	r3, r2, r3
 8002992:	00db      	lsls	r3, r3, #3
 8002994:	3332      	adds	r3, #50	; 0x32
 8002996:	4a07      	ldr	r2, [pc, #28]	; (80029b4 <UART_SetConfig+0x384>)
 8002998:	fba2 2303 	umull	r2, r3, r2, r3
 800299c:	095b      	lsrs	r3, r3, #5
 800299e:	f003 0207 	and.w	r2, r3, #7
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	4442      	add	r2, r8
 80029a8:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80029aa:	e1b2      	b.n	8002d12 <UART_SetConfig+0x6e2>
 80029ac:	40011000 	.word	0x40011000
 80029b0:	40011400 	.word	0x40011400
 80029b4:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4ad7      	ldr	r2, [pc, #860]	; (8002d1c <UART_SetConfig+0x6ec>)
 80029be:	4293      	cmp	r3, r2
 80029c0:	d005      	beq.n	80029ce <UART_SetConfig+0x39e>
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	4ad6      	ldr	r2, [pc, #856]	; (8002d20 <UART_SetConfig+0x6f0>)
 80029c8:	4293      	cmp	r3, r2
 80029ca:	f040 80d1 	bne.w	8002b70 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 80029ce:	f7ff f933 	bl	8001c38 <HAL_RCC_GetPCLK2Freq>
 80029d2:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80029d4:	68bb      	ldr	r3, [r7, #8]
 80029d6:	469a      	mov	sl, r3
 80029d8:	f04f 0b00 	mov.w	fp, #0
 80029dc:	46d0      	mov	r8, sl
 80029de:	46d9      	mov	r9, fp
 80029e0:	eb18 0308 	adds.w	r3, r8, r8
 80029e4:	eb49 0409 	adc.w	r4, r9, r9
 80029e8:	4698      	mov	r8, r3
 80029ea:	46a1      	mov	r9, r4
 80029ec:	eb18 080a 	adds.w	r8, r8, sl
 80029f0:	eb49 090b 	adc.w	r9, r9, fp
 80029f4:	f04f 0100 	mov.w	r1, #0
 80029f8:	f04f 0200 	mov.w	r2, #0
 80029fc:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002a00:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002a04:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002a08:	4688      	mov	r8, r1
 8002a0a:	4691      	mov	r9, r2
 8002a0c:	eb1a 0508 	adds.w	r5, sl, r8
 8002a10:	eb4b 0609 	adc.w	r6, fp, r9
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	685b      	ldr	r3, [r3, #4]
 8002a18:	4619      	mov	r1, r3
 8002a1a:	f04f 0200 	mov.w	r2, #0
 8002a1e:	f04f 0300 	mov.w	r3, #0
 8002a22:	f04f 0400 	mov.w	r4, #0
 8002a26:	0094      	lsls	r4, r2, #2
 8002a28:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002a2c:	008b      	lsls	r3, r1, #2
 8002a2e:	461a      	mov	r2, r3
 8002a30:	4623      	mov	r3, r4
 8002a32:	4628      	mov	r0, r5
 8002a34:	4631      	mov	r1, r6
 8002a36:	f7fd fbcf 	bl	80001d8 <__aeabi_uldivmod>
 8002a3a:	4603      	mov	r3, r0
 8002a3c:	460c      	mov	r4, r1
 8002a3e:	461a      	mov	r2, r3
 8002a40:	4bb8      	ldr	r3, [pc, #736]	; (8002d24 <UART_SetConfig+0x6f4>)
 8002a42:	fba3 2302 	umull	r2, r3, r3, r2
 8002a46:	095b      	lsrs	r3, r3, #5
 8002a48:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002a4c:	68bb      	ldr	r3, [r7, #8]
 8002a4e:	469b      	mov	fp, r3
 8002a50:	f04f 0c00 	mov.w	ip, #0
 8002a54:	46d9      	mov	r9, fp
 8002a56:	46e2      	mov	sl, ip
 8002a58:	eb19 0309 	adds.w	r3, r9, r9
 8002a5c:	eb4a 040a 	adc.w	r4, sl, sl
 8002a60:	4699      	mov	r9, r3
 8002a62:	46a2      	mov	sl, r4
 8002a64:	eb19 090b 	adds.w	r9, r9, fp
 8002a68:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002a6c:	f04f 0100 	mov.w	r1, #0
 8002a70:	f04f 0200 	mov.w	r2, #0
 8002a74:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002a78:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002a7c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002a80:	4689      	mov	r9, r1
 8002a82:	4692      	mov	sl, r2
 8002a84:	eb1b 0509 	adds.w	r5, fp, r9
 8002a88:	eb4c 060a 	adc.w	r6, ip, sl
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	685b      	ldr	r3, [r3, #4]
 8002a90:	4619      	mov	r1, r3
 8002a92:	f04f 0200 	mov.w	r2, #0
 8002a96:	f04f 0300 	mov.w	r3, #0
 8002a9a:	f04f 0400 	mov.w	r4, #0
 8002a9e:	0094      	lsls	r4, r2, #2
 8002aa0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002aa4:	008b      	lsls	r3, r1, #2
 8002aa6:	461a      	mov	r2, r3
 8002aa8:	4623      	mov	r3, r4
 8002aaa:	4628      	mov	r0, r5
 8002aac:	4631      	mov	r1, r6
 8002aae:	f7fd fb93 	bl	80001d8 <__aeabi_uldivmod>
 8002ab2:	4603      	mov	r3, r0
 8002ab4:	460c      	mov	r4, r1
 8002ab6:	461a      	mov	r2, r3
 8002ab8:	4b9a      	ldr	r3, [pc, #616]	; (8002d24 <UART_SetConfig+0x6f4>)
 8002aba:	fba3 1302 	umull	r1, r3, r3, r2
 8002abe:	095b      	lsrs	r3, r3, #5
 8002ac0:	2164      	movs	r1, #100	; 0x64
 8002ac2:	fb01 f303 	mul.w	r3, r1, r3
 8002ac6:	1ad3      	subs	r3, r2, r3
 8002ac8:	011b      	lsls	r3, r3, #4
 8002aca:	3332      	adds	r3, #50	; 0x32
 8002acc:	4a95      	ldr	r2, [pc, #596]	; (8002d24 <UART_SetConfig+0x6f4>)
 8002ace:	fba2 2303 	umull	r2, r3, r2, r3
 8002ad2:	095b      	lsrs	r3, r3, #5
 8002ad4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002ad8:	4498      	add	r8, r3
 8002ada:	68bb      	ldr	r3, [r7, #8]
 8002adc:	469b      	mov	fp, r3
 8002ade:	f04f 0c00 	mov.w	ip, #0
 8002ae2:	46d9      	mov	r9, fp
 8002ae4:	46e2      	mov	sl, ip
 8002ae6:	eb19 0309 	adds.w	r3, r9, r9
 8002aea:	eb4a 040a 	adc.w	r4, sl, sl
 8002aee:	4699      	mov	r9, r3
 8002af0:	46a2      	mov	sl, r4
 8002af2:	eb19 090b 	adds.w	r9, r9, fp
 8002af6:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002afa:	f04f 0100 	mov.w	r1, #0
 8002afe:	f04f 0200 	mov.w	r2, #0
 8002b02:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002b06:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002b0a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002b0e:	4689      	mov	r9, r1
 8002b10:	4692      	mov	sl, r2
 8002b12:	eb1b 0509 	adds.w	r5, fp, r9
 8002b16:	eb4c 060a 	adc.w	r6, ip, sl
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	685b      	ldr	r3, [r3, #4]
 8002b1e:	4619      	mov	r1, r3
 8002b20:	f04f 0200 	mov.w	r2, #0
 8002b24:	f04f 0300 	mov.w	r3, #0
 8002b28:	f04f 0400 	mov.w	r4, #0
 8002b2c:	0094      	lsls	r4, r2, #2
 8002b2e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002b32:	008b      	lsls	r3, r1, #2
 8002b34:	461a      	mov	r2, r3
 8002b36:	4623      	mov	r3, r4
 8002b38:	4628      	mov	r0, r5
 8002b3a:	4631      	mov	r1, r6
 8002b3c:	f7fd fb4c 	bl	80001d8 <__aeabi_uldivmod>
 8002b40:	4603      	mov	r3, r0
 8002b42:	460c      	mov	r4, r1
 8002b44:	461a      	mov	r2, r3
 8002b46:	4b77      	ldr	r3, [pc, #476]	; (8002d24 <UART_SetConfig+0x6f4>)
 8002b48:	fba3 1302 	umull	r1, r3, r3, r2
 8002b4c:	095b      	lsrs	r3, r3, #5
 8002b4e:	2164      	movs	r1, #100	; 0x64
 8002b50:	fb01 f303 	mul.w	r3, r1, r3
 8002b54:	1ad3      	subs	r3, r2, r3
 8002b56:	011b      	lsls	r3, r3, #4
 8002b58:	3332      	adds	r3, #50	; 0x32
 8002b5a:	4a72      	ldr	r2, [pc, #456]	; (8002d24 <UART_SetConfig+0x6f4>)
 8002b5c:	fba2 2303 	umull	r2, r3, r2, r3
 8002b60:	095b      	lsrs	r3, r3, #5
 8002b62:	f003 020f 	and.w	r2, r3, #15
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	4442      	add	r2, r8
 8002b6c:	609a      	str	r2, [r3, #8]
 8002b6e:	e0d0      	b.n	8002d12 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8002b70:	f7ff f84e 	bl	8001c10 <HAL_RCC_GetPCLK1Freq>
 8002b74:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002b76:	68bb      	ldr	r3, [r7, #8]
 8002b78:	469a      	mov	sl, r3
 8002b7a:	f04f 0b00 	mov.w	fp, #0
 8002b7e:	46d0      	mov	r8, sl
 8002b80:	46d9      	mov	r9, fp
 8002b82:	eb18 0308 	adds.w	r3, r8, r8
 8002b86:	eb49 0409 	adc.w	r4, r9, r9
 8002b8a:	4698      	mov	r8, r3
 8002b8c:	46a1      	mov	r9, r4
 8002b8e:	eb18 080a 	adds.w	r8, r8, sl
 8002b92:	eb49 090b 	adc.w	r9, r9, fp
 8002b96:	f04f 0100 	mov.w	r1, #0
 8002b9a:	f04f 0200 	mov.w	r2, #0
 8002b9e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002ba2:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002ba6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002baa:	4688      	mov	r8, r1
 8002bac:	4691      	mov	r9, r2
 8002bae:	eb1a 0508 	adds.w	r5, sl, r8
 8002bb2:	eb4b 0609 	adc.w	r6, fp, r9
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	685b      	ldr	r3, [r3, #4]
 8002bba:	4619      	mov	r1, r3
 8002bbc:	f04f 0200 	mov.w	r2, #0
 8002bc0:	f04f 0300 	mov.w	r3, #0
 8002bc4:	f04f 0400 	mov.w	r4, #0
 8002bc8:	0094      	lsls	r4, r2, #2
 8002bca:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002bce:	008b      	lsls	r3, r1, #2
 8002bd0:	461a      	mov	r2, r3
 8002bd2:	4623      	mov	r3, r4
 8002bd4:	4628      	mov	r0, r5
 8002bd6:	4631      	mov	r1, r6
 8002bd8:	f7fd fafe 	bl	80001d8 <__aeabi_uldivmod>
 8002bdc:	4603      	mov	r3, r0
 8002bde:	460c      	mov	r4, r1
 8002be0:	461a      	mov	r2, r3
 8002be2:	4b50      	ldr	r3, [pc, #320]	; (8002d24 <UART_SetConfig+0x6f4>)
 8002be4:	fba3 2302 	umull	r2, r3, r3, r2
 8002be8:	095b      	lsrs	r3, r3, #5
 8002bea:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002bee:	68bb      	ldr	r3, [r7, #8]
 8002bf0:	469b      	mov	fp, r3
 8002bf2:	f04f 0c00 	mov.w	ip, #0
 8002bf6:	46d9      	mov	r9, fp
 8002bf8:	46e2      	mov	sl, ip
 8002bfa:	eb19 0309 	adds.w	r3, r9, r9
 8002bfe:	eb4a 040a 	adc.w	r4, sl, sl
 8002c02:	4699      	mov	r9, r3
 8002c04:	46a2      	mov	sl, r4
 8002c06:	eb19 090b 	adds.w	r9, r9, fp
 8002c0a:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002c0e:	f04f 0100 	mov.w	r1, #0
 8002c12:	f04f 0200 	mov.w	r2, #0
 8002c16:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002c1a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002c1e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002c22:	4689      	mov	r9, r1
 8002c24:	4692      	mov	sl, r2
 8002c26:	eb1b 0509 	adds.w	r5, fp, r9
 8002c2a:	eb4c 060a 	adc.w	r6, ip, sl
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	685b      	ldr	r3, [r3, #4]
 8002c32:	4619      	mov	r1, r3
 8002c34:	f04f 0200 	mov.w	r2, #0
 8002c38:	f04f 0300 	mov.w	r3, #0
 8002c3c:	f04f 0400 	mov.w	r4, #0
 8002c40:	0094      	lsls	r4, r2, #2
 8002c42:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002c46:	008b      	lsls	r3, r1, #2
 8002c48:	461a      	mov	r2, r3
 8002c4a:	4623      	mov	r3, r4
 8002c4c:	4628      	mov	r0, r5
 8002c4e:	4631      	mov	r1, r6
 8002c50:	f7fd fac2 	bl	80001d8 <__aeabi_uldivmod>
 8002c54:	4603      	mov	r3, r0
 8002c56:	460c      	mov	r4, r1
 8002c58:	461a      	mov	r2, r3
 8002c5a:	4b32      	ldr	r3, [pc, #200]	; (8002d24 <UART_SetConfig+0x6f4>)
 8002c5c:	fba3 1302 	umull	r1, r3, r3, r2
 8002c60:	095b      	lsrs	r3, r3, #5
 8002c62:	2164      	movs	r1, #100	; 0x64
 8002c64:	fb01 f303 	mul.w	r3, r1, r3
 8002c68:	1ad3      	subs	r3, r2, r3
 8002c6a:	011b      	lsls	r3, r3, #4
 8002c6c:	3332      	adds	r3, #50	; 0x32
 8002c6e:	4a2d      	ldr	r2, [pc, #180]	; (8002d24 <UART_SetConfig+0x6f4>)
 8002c70:	fba2 2303 	umull	r2, r3, r2, r3
 8002c74:	095b      	lsrs	r3, r3, #5
 8002c76:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002c7a:	4498      	add	r8, r3
 8002c7c:	68bb      	ldr	r3, [r7, #8]
 8002c7e:	469b      	mov	fp, r3
 8002c80:	f04f 0c00 	mov.w	ip, #0
 8002c84:	46d9      	mov	r9, fp
 8002c86:	46e2      	mov	sl, ip
 8002c88:	eb19 0309 	adds.w	r3, r9, r9
 8002c8c:	eb4a 040a 	adc.w	r4, sl, sl
 8002c90:	4699      	mov	r9, r3
 8002c92:	46a2      	mov	sl, r4
 8002c94:	eb19 090b 	adds.w	r9, r9, fp
 8002c98:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002c9c:	f04f 0100 	mov.w	r1, #0
 8002ca0:	f04f 0200 	mov.w	r2, #0
 8002ca4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002ca8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002cac:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002cb0:	4689      	mov	r9, r1
 8002cb2:	4692      	mov	sl, r2
 8002cb4:	eb1b 0509 	adds.w	r5, fp, r9
 8002cb8:	eb4c 060a 	adc.w	r6, ip, sl
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	685b      	ldr	r3, [r3, #4]
 8002cc0:	4619      	mov	r1, r3
 8002cc2:	f04f 0200 	mov.w	r2, #0
 8002cc6:	f04f 0300 	mov.w	r3, #0
 8002cca:	f04f 0400 	mov.w	r4, #0
 8002cce:	0094      	lsls	r4, r2, #2
 8002cd0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002cd4:	008b      	lsls	r3, r1, #2
 8002cd6:	461a      	mov	r2, r3
 8002cd8:	4623      	mov	r3, r4
 8002cda:	4628      	mov	r0, r5
 8002cdc:	4631      	mov	r1, r6
 8002cde:	f7fd fa7b 	bl	80001d8 <__aeabi_uldivmod>
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	460c      	mov	r4, r1
 8002ce6:	461a      	mov	r2, r3
 8002ce8:	4b0e      	ldr	r3, [pc, #56]	; (8002d24 <UART_SetConfig+0x6f4>)
 8002cea:	fba3 1302 	umull	r1, r3, r3, r2
 8002cee:	095b      	lsrs	r3, r3, #5
 8002cf0:	2164      	movs	r1, #100	; 0x64
 8002cf2:	fb01 f303 	mul.w	r3, r1, r3
 8002cf6:	1ad3      	subs	r3, r2, r3
 8002cf8:	011b      	lsls	r3, r3, #4
 8002cfa:	3332      	adds	r3, #50	; 0x32
 8002cfc:	4a09      	ldr	r2, [pc, #36]	; (8002d24 <UART_SetConfig+0x6f4>)
 8002cfe:	fba2 2303 	umull	r2, r3, r2, r3
 8002d02:	095b      	lsrs	r3, r3, #5
 8002d04:	f003 020f 	and.w	r2, r3, #15
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4442      	add	r2, r8
 8002d0e:	609a      	str	r2, [r3, #8]
}
 8002d10:	e7ff      	b.n	8002d12 <UART_SetConfig+0x6e2>
 8002d12:	bf00      	nop
 8002d14:	3714      	adds	r7, #20
 8002d16:	46bd      	mov	sp, r7
 8002d18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002d1c:	40011000 	.word	0x40011000
 8002d20:	40011400 	.word	0x40011400
 8002d24:	51eb851f 	.word	0x51eb851f

08002d28 <__libc_init_array>:
 8002d28:	b570      	push	{r4, r5, r6, lr}
 8002d2a:	4e0d      	ldr	r6, [pc, #52]	; (8002d60 <__libc_init_array+0x38>)
 8002d2c:	4c0d      	ldr	r4, [pc, #52]	; (8002d64 <__libc_init_array+0x3c>)
 8002d2e:	1ba4      	subs	r4, r4, r6
 8002d30:	10a4      	asrs	r4, r4, #2
 8002d32:	2500      	movs	r5, #0
 8002d34:	42a5      	cmp	r5, r4
 8002d36:	d109      	bne.n	8002d4c <__libc_init_array+0x24>
 8002d38:	4e0b      	ldr	r6, [pc, #44]	; (8002d68 <__libc_init_array+0x40>)
 8002d3a:	4c0c      	ldr	r4, [pc, #48]	; (8002d6c <__libc_init_array+0x44>)
 8002d3c:	f000 f820 	bl	8002d80 <_init>
 8002d40:	1ba4      	subs	r4, r4, r6
 8002d42:	10a4      	asrs	r4, r4, #2
 8002d44:	2500      	movs	r5, #0
 8002d46:	42a5      	cmp	r5, r4
 8002d48:	d105      	bne.n	8002d56 <__libc_init_array+0x2e>
 8002d4a:	bd70      	pop	{r4, r5, r6, pc}
 8002d4c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002d50:	4798      	blx	r3
 8002d52:	3501      	adds	r5, #1
 8002d54:	e7ee      	b.n	8002d34 <__libc_init_array+0xc>
 8002d56:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002d5a:	4798      	blx	r3
 8002d5c:	3501      	adds	r5, #1
 8002d5e:	e7f2      	b.n	8002d46 <__libc_init_array+0x1e>
 8002d60:	08002de0 	.word	0x08002de0
 8002d64:	08002de0 	.word	0x08002de0
 8002d68:	08002de0 	.word	0x08002de0
 8002d6c:	08002de4 	.word	0x08002de4

08002d70 <memset>:
 8002d70:	4402      	add	r2, r0
 8002d72:	4603      	mov	r3, r0
 8002d74:	4293      	cmp	r3, r2
 8002d76:	d100      	bne.n	8002d7a <memset+0xa>
 8002d78:	4770      	bx	lr
 8002d7a:	f803 1b01 	strb.w	r1, [r3], #1
 8002d7e:	e7f9      	b.n	8002d74 <memset+0x4>

08002d80 <_init>:
 8002d80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d82:	bf00      	nop
 8002d84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d86:	bc08      	pop	{r3}
 8002d88:	469e      	mov	lr, r3
 8002d8a:	4770      	bx	lr

08002d8c <_fini>:
 8002d8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d8e:	bf00      	nop
 8002d90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d92:	bc08      	pop	{r3}
 8002d94:	469e      	mov	lr, r3
 8002d96:	4770      	bx	lr
